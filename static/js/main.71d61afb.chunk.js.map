{"version":3,"sources":["game/utils.ts","game/direction.ts","game/entity.ts","game/entityType.ts","game/invisibleTarget.ts","game/duck.ts","game/food.ts","game/gameState.ts","game/nest.ts","game/gameScene.ts","game/uiScene.ts","game/gameRunner.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomInt","max","Math","floor","random","randomElement","array","length","Direction","name","offset","x","y","opposite","this","west","northWest","north","northEast","east","southEast","south","southWest","map","list","push","i","vector","angle","Phaser","Angle","Between","abs","quad","initialise","EntityType","Entity","gameState","imageName","image","isDestroyed","scene","add","on","pointer","onPointerDown","destroy","otherEntity","Distance","entity","speed","vectorToTarget","dx","dy","xR","cos","yR","sin","total","modX","modY","console","error","RadToDeg","Vector2","InvisibleTarget","depth","setVisible","debug","showTargets","Invisible","duckAnims","walk","startFrame","endFrame","feed","quack","stand","standFlap","DuckType","duckTypes","Duck","duckType","duckling","motion","anim","direction","f","target","animationStep","active","idleTicks","thought","leaderDuck","age","nesting","scale","setInteractive","cursor","input","hitArea","setTo","time","delayedCall","changeFrame","pointerHandled","event","stopImmediatePropagation","startQuackAnimation","sound","play","volume","thoughts","cache","json","get","uiScene","displayDuckInfo","delay","localF","startWalkAnimation","startStandFlapAnimation","frame","texture","isPointWater","nest","vectorToEntity","DUCKLING_MATURATION_AGE","displayToast","oppDir","justBehindX","justBehindY","determineFromVector","entityType","fetchFood","select","distance","distanceFromEntity","sort","reverse","startStandAnimation","waterTile","waterTiles","addEntity","Food","startFeedAnimation","start","bread","entities","GameState","cursors","showMouseData","activePointer","fetchPointer","cameras","main","getWorldPoint","forEach","update","newEntities","filter","e","r","getBounds","rectangle","width","height","contains","_instance","Nest","nestingDuck","nestingTime","ducks","fetchDucks","duck","sendToNest","log","trace","NESTING_DURATION","nestingComplete","ducklingCount","names","leader","GameScene","singleton","load","spritesheet","frameWidth","frameHeight","audio","window","addEventListener","setDefaultCursor","leftButtonDown","point","createBread","data","buildMap","randomTile","randomDuckType","create","scrollX","scrollY","zoom","pruneEntities","tileWidthHalf","tilewidth","tileHeightHalf","tileheight","layer","layers","mapWidth","mapHeight","centerX","id","tx","ty","tile","FONT_FAMILY","UiScene","key","duckInfoObjects","debugMessage","toastMessages","toastX","toastY","toastYMargin","addText","startBeginningMessage","debugMsg","worldPointer","fetchWorldPointerPosition","toFixed","text","helloMessage","findMiddleWidth","alpha","foodMessage","timeLine","tweens","timeline","targets","duration","size","textObject","fontFamily","fontSize","seconds","element","title","fontStyle","message","toast","t","repositionToasts","toastMessage","object","gameConfig","type","mode","FIT","parent","backgroundColor","App","className","href","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71d61afb.chunk.js","sourcesContent":["export function randomInt(max: number): number {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport function randomElement<T>(array: Array<T>) : T {\r\n    const i = randomInt(array.length);\r\n    return array[i];\r\n}","import { randomInt } from \"./utils\";\r\n\r\nexport class Direction {\r\n\r\n    static west: Direction;\r\n    static northWest: Direction;\r\n    static north: Direction;\r\n    static northEast: Direction;\r\n    static east: Direction;\r\n    static southEast: Direction;\r\n    static south: Direction;\r\n    static southWest: Direction;\r\n\r\n    static map: Direction[];\r\n    static list: Direction[];\r\n\r\n    static initialise() {\r\n\r\n        Direction.west = new Direction('west', 0, -2, 0);\r\n        Direction.northWest = new Direction('northWest', 32, -2, -1);\r\n        Direction.north = new Direction('north', 64, 0, -2);\r\n        Direction.northEast = new Direction('northEast', 96, 2, -1);\r\n        Direction.east = new Direction('east', 128, 2, 0);\r\n        Direction.southEast = new Direction('southEast', 160, 2, 1);\r\n        Direction.south = new Direction('south', 192, 0, 2);\r\n        Direction.southWest = new Direction('southWest', 224, -2, 1);\r\n\r\n        Direction.west.opposite = Direction.east;\r\n        Direction.northWest.opposite = Direction.southEast;\r\n        Direction.north.opposite = Direction.south;\r\n        Direction.northEast.opposite = Direction.southWest;\r\n        Direction.east.opposite = Direction.west;\r\n        Direction.southEast.opposite = Direction.northWest;\r\n        Direction.south.opposite = Direction.north;\r\n        Direction.southWest.opposite = Direction.northEast;\r\n\r\n        Direction.map = [];\r\n        Direction.map[Direction.west.name] = Direction.west;\r\n        Direction.map[Direction.northWest.name] = Direction.northWest;\r\n        Direction.map[Direction.north.name] = Direction.north;\r\n        Direction.map[Direction.northEast.name] = Direction.northEast;\r\n        Direction.map[Direction.east.name] = Direction.east;\r\n        Direction.map[Direction.southEast.name] = Direction.southEast;\r\n        Direction.map[Direction.south.name] = Direction.south;\r\n        Direction.map[Direction.southWest.name] = Direction.southWest;\r\n\r\n        Direction.list = [];\r\n        Direction.list.push(Direction.west);\r\n        Direction.list.push(Direction.northWest);\r\n        Direction.list.push(Direction.north);\r\n        Direction.list.push(Direction.northEast);\r\n        Direction.list.push(Direction.east);\r\n        Direction.list.push(Direction.southEast);\r\n        Direction.list.push(Direction.south);\r\n        Direction.list.push(Direction.southWest);\r\n    }\r\n\r\n    static get(name: string): Direction {\r\n        return Direction.map[name];\r\n    }\r\n\r\n    static random(): Direction {\r\n        const i = randomInt(Direction.list.length);\r\n        return Direction.list[i];\r\n    }\r\n\r\n    static determineFromVector(vector: Phaser.Math.Vector2) {\r\n\r\n        const angle = Phaser.Math.Angle.Between(0, 0, Math.abs(vector.x), Math.abs(vector.y));\r\n\r\n        let quad = [];\r\n\r\n        // calculate quads for annoying trig and negative sign reasons. In phaser, 0,0 is top left so Y is inverted.\r\n\r\n        // top left quad\r\n        if (vector.x >= 0 && vector.y < 0) {\r\n            quad = [Direction.east, Direction.northEast, Direction.north];\r\n        }\r\n        // bottom left\r\n        else if (vector.x >= 0 && vector.y >= 0) {\r\n            quad = [Direction.east, Direction.southEast, Direction.south];\r\n        }\r\n        // top right\r\n        else if (vector.x < 0 && vector.y < 0) {\r\n            quad = [Direction.west, Direction.northWest, Direction.north];\r\n        }\r\n        // bottom right\r\n        else if (vector.x < 0 && vector.y >= 0) {\r\n            quad = [Direction.west, Direction.southWest, Direction.south];\r\n        }\r\n\r\n        let i = 0;\r\n        if (angle > 1.178097) { // 67.5 deg\r\n            i = 2;\r\n        }\r\n        else if (angle > 0.3926991) { // 22.5 deg\r\n            i = 1;\r\n        }\r\n\r\n        const direction = quad[i];\r\n        return direction;\r\n    }\r\n\r\n    name: string;\r\n    offset: number;\r\n    x: number;\r\n    y: number;\r\n    opposite: Direction;\r\n\r\n    constructor(name: string, offset: number, x: number, y: number) {\r\n        this.name = name;\r\n        this.offset = offset;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nDirection.initialise();\r\n","import { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport abstract class Entity {\r\n\r\n    image: Phaser.GameObjects.Image;\r\n    isDestroyed = false;\r\n    gameState: GameState;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        this.image = gameState.scene.add.image(x, y, imageName);\r\n        this.gameState = gameState;\r\n\r\n        this.image.on('pointerdown', (pointer: Phaser.Input.Pointer) => {\r\n            this.onPointerDown(pointer)\r\n        });\r\n    }\r\n\r\n    abstract entityType(): EntityType;\r\n\r\n    onPointerDown(pointer: Phaser.Input.Pointer) {\r\n\r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n        if (this.image)\r\n            this.image.destroy();\r\n    }\r\n\r\n    distanceFromEntity(otherEntity: Entity) {\r\n        return Phaser.Math.Distance.Between(this.x, this.y, otherEntity.x, otherEntity.y);\r\n    }\r\n\r\n    vectorToEntity(entity: Entity, speed: number) {\r\n        return this.vectorToTarget(entity.x, entity.y, speed);\r\n    }\r\n\r\n    vectorToTarget(x: number, y: number, speed: number) {\r\n\r\n        const dx = x - this.x;\r\n        const dy = y - this.y;\r\n\r\n        const angle = Phaser.Math.Angle.Between(this.x, this.y, x, y);\r\n        let xR = Math.cos(angle);\r\n        let yR = Math.sin(angle);\r\n\r\n        const total =  Math.abs(xR) + Math.abs(yR);\r\n        let modX = (xR / total) * speed;\r\n        let modY = (yR / total) * speed;\r\n\r\n        if (modX > 10 || modY > 10) {\r\n\r\n            console.error(`Spurious vectorToTargetResult - C: ${x}, ${y} | A: ${Phaser.Math.RadToDeg(angle)} | ${dx}, ${dy} | ${modX}, ${modY}`);\r\n\r\n            if (modX > speed) {\r\n                modX = speed;\r\n            }\r\n            else if (modX < -speed) {\r\n                modX = -speed;\r\n            }\r\n\r\n            if (modY > speed) {\r\n                modY = speed;\r\n            }\r\n            else if (modY < -speed) {\r\n                modY = -speed;\r\n            }\r\n        }\r\n        return new Phaser.Math.Vector2(modX, modY);\r\n    }\r\n\r\n    get x() {\r\n        return this.image.x;\r\n    }\r\n    set x(x: number) {\r\n        this.image.x = x;\r\n    }\r\n\r\n    get y() {\r\n        return this.image.y;\r\n    }\r\n    set y(y: number) {\r\n        this.image.y = y;\r\n    }\r\n}\r\n","export enum EntityType {\r\n    Food,\r\n    Duck,\r\n    Invisible,\r\n    Nest\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class InvisibleTarget extends Entity {\r\n\r\n    constructor(gameState: GameState, x: number, y: number) {\r\n        super(gameState, 'target', x, y);\r\n\r\n        this.image.depth = 10000;\r\n        this.image.setVisible(gameState.debug.showTargets);\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Invisible;\r\n    }\r\n\r\n    update() {\r\n    }\r\n}\r\n","import { Direction } from \"./direction\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\nimport { InvisibleTarget } from \"./invisibleTarget\";\r\nimport { Nest } from \"./nest\";\r\nimport { randomElement, randomInt } from \"./utils\";\r\n\r\nconst duckAnims = {\r\n    walk: {\r\n        startFrame: 0,\r\n        endFrame: 4,\r\n        speed: 0.20\r\n    },\r\n    feed: {\r\n        startFrame: 5,\r\n        endFrame: 7,\r\n        speed: 0.8\r\n    },\r\n    quack: {\r\n        startFrame: 8,\r\n        endFrame: 10,\r\n        speed: 0.6\r\n    },\r\n    stand: {\r\n        startFrame: 11,\r\n        endFrame: 13,\r\n        speed: 0.2\r\n    },\r\n    standFlap: {\r\n        startFrame: 14,\r\n        endFrame: 16,\r\n        speed: 0.2\r\n    }\r\n};\r\n\r\nexport class DuckType {\r\n    static duckTypes = [\r\n        \"white\",\r\n        \"mallard\"\r\n    ];\r\n\r\n    static random() {\r\n        return DuckType.duckTypes[randomInt(DuckType.duckTypes.length)];\r\n    }\r\n}\r\n\r\nexport class Duck extends Entity {\r\n\r\n    /**\r\n     * Gets the age in ticks when a duckling should age into a duck.\r\n     */\r\n    static DUCKLING_MATURATION_AGE = 3000;\r\n\r\n    name = randomElement([\"Daisy\", \"Mavis\", \"Harold\", \"Ernest\", \"Ermintrude\", \"Annie\", \"Reginald\", \"Clarence\", \"Emmett\", \"Gert\", \"Hilda\", \"Doris\", \"Hattie\"]);\r\n\r\n    motion: any;\r\n    anim: any;\r\n    direction: Direction = Direction.random();\r\n    speed: number;\r\n\r\n    /**\r\n     * Frame.\r\n     */\r\n    f: number;\r\n\r\n    target: Entity = null;\r\n    vector: Phaser.Math.Vector2 = null;\r\n\r\n    animationStep = 1;\r\n\r\n    active = true;\r\n\r\n    idleTicks = 0;\r\n\r\n    thought: string = '';\r\n\r\n    /**\r\n     * The duck this duck should follow.\r\n     */\r\n    leaderDuck: Duck;\r\n\r\n    duckType: DuckType;\r\n\r\n    duckling: boolean;\r\n\r\n    /**\r\n     * Age of the duck in ticks.\r\n     */\r\n    age = 0;\r\n\r\n    private nesting = false;\r\n\r\n    constructor(gameState: GameState, x: number, y: number, duckType: string, duckling = false) {\r\n        super(gameState, duckling ? `duck-duckling` : `duck-${duckType}`, x, y);\r\n        if (duckling) {\r\n            this.image.scale = 0.4;\r\n        }\r\n        else {\r\n            this.image.scale = 0.8;\r\n        }\r\n\r\n        this.duckling = duckling;\r\n\r\n        this.image.setInteractive({ cursor: 'pointer'});\r\n        this.image.input.hitArea.setTo(128, 128, 512 - 128, 512 -128);\r\n\r\n        this.duckType = duckType;\r\n        this.motion = 'walk';\r\n        this.anim = duckAnims[this.motion];\r\n        this.speed = this.anim.speed;\r\n        this.f = this.anim.startFrame;\r\n\r\n        this.gameState.scene.time.delayedCall(this.anim.speed * 1000, this.changeFrame, [], this);\r\n    };\r\n\r\n    onPointerDown(pointer: Phaser.Input.Pointer) {\r\n        this.gameState.pointerHandled = true;\r\n        pointer.event.stopImmediatePropagation();\r\n        this.startQuackAnimation();\r\n        this.gameState.scene.sound.add('quackquack-f').play({ volume: 0.2 });\r\n        const thoughts = this.gameState.scene.cache.json.get('duck-thoughts') as Array<string>;\r\n        this.thought = randomElement(thoughts);\r\n        this.gameState.uiScene.displayDuckInfo(this);\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Duck;\r\n    }\r\n\r\n    startWalkAnimation() {\r\n        this.f = duckAnims['walk'].startFrame;\r\n        this.anim = duckAnims['walk'];\r\n        this.animationStep = 1;\r\n        this.motion = 'walk';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    startFeedAnimation() {\r\n        this.f = duckAnims['feed'].startFrame;\r\n        this.anim = duckAnims['feed'];\r\n        this.animationStep = 1;\r\n        this.motion = 'feed';\r\n        this.changeFrame();\r\n        this.active = false;\r\n    }\r\n\r\n    startQuackAnimation() {\r\n        this.f = duckAnims['quack'].startFrame;\r\n        this.anim = duckAnims['quack'];\r\n        this.animationStep = 1;\r\n        this.motion = 'quack';\r\n        this.changeFrame();\r\n        this.active = false;\r\n    }\r\n\r\n    startStandAnimation() {\r\n        this.f = duckAnims['stand'].startFrame;\r\n        this.anim = duckAnims['stand'];\r\n        this.animationStep = 1;\r\n        this.motion = 'stand';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    startStandFlapAnimation() {\r\n        this.f = duckAnims['standFlap'].startFrame;\r\n        this.anim = duckAnims['standFlap'];\r\n        this.animationStep = 1;\r\n        this.motion = 'standFlap';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    changeFrame() {\r\n\r\n        let delay = this.anim.speed;\r\n        this.image.depth = this.y + 256;\r\n        let localF = this.f;\r\n\r\n        if (this.f > this.anim.endFrame || this.f < 0 || this.f < this.anim.startFrame) {\r\n            switch (this.motion) {\r\n                case 'walk':\r\n                    this.animationStep = -this.animationStep;\r\n                    this.f += 2 * this.animationStep;\r\n                    localF = this.f;\r\n                    break;\r\n\r\n                case 'feed':\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.startWalkAnimation, [], this);\r\n                    return;\r\n\r\n                case 'quack':\r\n                    localF = this.f - 4;\r\n                    if (this.f === 11) {\r\n                        localF = 9;\r\n                    }\r\n                    else if (this.f > 16) {\r\n                        this.startWalkAnimation();\r\n                        return;\r\n                    }\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.startWalkAnimation, [], this);\r\n                    break;\r\n\r\n                case 'stand':\r\n                    this.startStandFlapAnimation();\r\n                    return;\r\n                case 'standFlap':\r\n                    this.f = this.anim.startFrame;\r\n                    localF = this.f;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.image.frame = this.image.texture.get(this.direction.offset + localF);\r\n        this.gameState.scene.time.delayedCall(delay * 1000, this.changeFrame, [], this);\r\n        this.f += this.animationStep;\r\n    }\r\n\r\n    /**\r\n     * Moves the duck by the given amount, or returns false is fuck a movement isn't possible.\r\n     * @param modX Amount to move duck by.\r\n     * @param modY Amount to move duck by.\r\n     */\r\n    move(modX: number, modY: number): boolean {\r\n\r\n        if (this.gameState.isPointWater(this.x + modX, this.y + modY)) {\r\n            this.x += modX;\r\n            this.y += modY;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    sendToNest(nest: Nest) {\r\n\r\n        this.nesting = true;\r\n        this.target?.destroy();\r\n        this.target = nest;\r\n        this.vector = this.vectorToEntity(nest, 3);\r\n    }\r\n\r\n    nestingComplete() {\r\n        this.nesting = false;\r\n        this.target = null;\r\n        this.active = true;\r\n    }\r\n\r\n    update() {\r\n        this.age++;\r\n        if (this.duckling && this.age > Duck.DUCKLING_MATURATION_AGE) {\r\n\r\n            this.duckling = false;\r\n            this.leaderDuck = null;\r\n            this.target = null;\r\n            this.image.destroy();\r\n\r\n            this.image = this.gameState.scene.add.image(this.x, this.y, `duck-${this.duckType}`);\r\n            this.image.scale = 0.8;\r\n\r\n            this.gameState.uiScene.displayToast(`${this.name} is all grown up.`);\r\n        }\r\n\r\n        if (!this.active)\r\n            return;\r\n\r\n        // 0.05% chance to quack\r\n        if (randomInt(2000) === 1) {\r\n            this.gameState.scene.sound.add('quackquack-f').play({ volume: 0.2 })\r\n            this.startQuackAnimation();\r\n        }\r\n\r\n        if (this.leaderDuck != null) {\r\n            const oppDir = this.leaderDuck.direction.opposite;\r\n\r\n            const leaderOffset = 90;\r\n            const justBehindX = this.leaderDuck.x + leaderOffset * oppDir.x;\r\n            const justBehindY = this.leaderDuck.y + leaderOffset * oppDir.y;\r\n\r\n            this.vector = this.vectorToTarget(justBehindX, justBehindY, 1)\r\n            this.direction = Direction.determineFromVector(this.vector);\r\n        }\r\n\r\n        // find a target\r\n        if (this.target == null || this.target.isDestroyed || this.target.entityType() === EntityType.Invisible) {\r\n\r\n            // look for food\r\n            if (this.gameState.fetchFood().length > 0) {\r\n                const breadList = this.gameState.fetchFood().map(f => ({ distance: this.distanceFromEntity(f) + randomInt(30), target: f }));\r\n                const select = breadList.sort(f => f.distance).reverse()[0];\r\n                if (select.distance < 450) {\r\n\r\n                    this.target?.destroy();\r\n                    this.target = select.target;\r\n                    this.vector = this.vectorToEntity(this.target, 5);\r\n                    this.startStandAnimation();\r\n                }\r\n            }\r\n\r\n            // find a random point to swim too\r\n            if (this.target == null) {\r\n                // no bread, swim to random target\r\n                const waterTile = randomElement(this.gameState.waterTiles);\r\n                this.target = this.gameState.addEntity(new InvisibleTarget(this.gameState, waterTile.x, waterTile.y));\r\n\r\n                this.vector = this.vectorToEntity(this.target, 1);\r\n                this.startWalkAnimation();\r\n            }\r\n            this.direction = Direction.determineFromVector(this.vector);\r\n        }\r\n\r\n        if (!this.nesting && this.target != null && this.distanceFromEntity(this.target) < 2.5) {\r\n            this.target.destroy();\r\n\r\n            if (this.target.entityType() === EntityType.Food) {\r\n                this.startFeedAnimation();\r\n            }\r\n            this.target = null;\r\n            return;\r\n        }\r\n        if (this.nesting && this.distanceFromEntity(this.target) < 2.5) {\r\n            this.vector.x = 0;\r\n            this.vector.y = 0;\r\n            this.direction = Direction.west;\r\n            this.active = false;\r\n        }\r\n\r\n        this.x += this.vector.x;\r\n        this.y += this.vector.y;\r\n        this.image.depth = this.y + this.image.y;\r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class Food extends Entity {\r\n\r\n    static createBread(gameState: GameState, x: number, y: number): Food {\r\n\r\n        const bread = new Food(gameState, 'bread', x, y);\r\n        bread.image.scale = 0.6;\r\n        gameState.entities.push(bread);\r\n        return bread;\r\n    }\r\n\r\n    start = 0;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        super(gameState, imageName, x, y);\r\n\r\n        this.image.depth = y + 32;\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Food;\r\n    }\r\n\r\n    update() {\r\n        this.start++;\r\n\r\n        if (this.start > 200) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n","import { Duck } from \"./duck\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { Food } from \"./food\";\r\nimport { GameScene } from \"./gameScene\";\r\nimport { UiScene } from \"./uiScene\";\r\n\r\nexport class GameState {\r\n\r\n    private static _instance = null;\r\n    static singleton(): GameState {\r\n        if (GameState._instance == null) {\r\n            this._instance = new GameState();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    scene: GameScene;\r\n    uiScene: UiScene;\r\n    cursors: Phaser.Types.Input.Keyboard.CursorKeys;\r\n    entities: Array<Entity> = [];\r\n    waterTiles: Array<Phaser.GameObjects.Image> = [];\r\n\r\n    debug = {\r\n        showTargets: false,\r\n        showMouseData: true\r\n    }\r\n\r\n    pointerHandled = false;\r\n\r\n    fetchPointer() {\r\n        return this.scene.input.activePointer;\r\n    }\r\n\r\n    fetchWorldPointerPosition() {\r\n        const pointer = this.fetchPointer();\r\n        const point = this.scene.cameras.main.getWorldPoint(pointer.x, pointer.y);\r\n        return point;\r\n    }\r\n\r\n    update() {\r\n        this.entities.forEach(entity => {\r\n            entity.update();\r\n        });\r\n\r\n        this.pointerHandled = false;\r\n    }\r\n\r\n    pruneEntities() {\r\n\r\n        const newEntities: Array<Entity> = [];\r\n        this.entities.forEach(entity => {\r\n            if (!entity.isDestroyed) {\r\n                newEntities.push(entity);\r\n            }\r\n        });\r\n        this.entities = newEntities;\r\n    }\r\n\r\n    fetchFood(): Food[] {\r\n        return this.entities.filter(e => e.entityType() === EntityType.Food && !e.isDestroyed) as Food[];\r\n    }\r\n\r\n    fetchDucks(): Duck[] {\r\n        return this.entities.filter(e => e.entityType() === EntityType.Duck && !e.isDestroyed) as Duck[];\r\n    }\r\n\r\n    addEntity(entity: Entity) {\r\n\r\n        this.entities.push(entity);\r\n        return entity;\r\n    }\r\n\r\n    showWaterCollision() {\r\n        for (let i = 0; i < this.waterTiles.length; i++) {\r\n            const tile = this.waterTiles[i];\r\n            const r = tile.getBounds();\r\n            this.scene.add.rectangle(r.x, r.y, r.width, r.height, 0x9966ff);\r\n        }\r\n    }\r\n\r\n    isPointWater(x: number, y: number) {\r\n        // collisions and drawing aren't aligned. no idea why.\r\n        for (let i = 0; i < this.waterTiles.length; i++) {\r\n            const tile = this.waterTiles[i];\r\n            if (tile.getBounds().contains(x + 60, y + 60)) {\r\n                this.scene.add.rectangle(x, y, 2, 2, 0xff0000);\r\n                return true;\r\n            }\r\n        }\r\n        this.scene.add.rectangle(x, y, 6, 6, 0x00ff00);\r\n        return false;\r\n    }\r\n}\r\n","import { Duck, DuckType } from \"./duck\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\nimport { randomElement, randomInt } from \"./utils\";\r\n\r\nexport class Nest extends Entity {\r\n\r\n    /**\r\n     * Gets duration a duck most nest for in ticks.\r\n     */\r\n    static NESTING_DURATION = 1000;\r\n\r\n    static create(gameState: GameState, x: number, y: number): Nest {\r\n\r\n        const nest = new Nest(gameState, 'nest', x, y);\r\n        gameState.addEntity(nest);\r\n        return nest;\r\n    }\r\n\r\n    private nestingDuck: Duck;\r\n\r\n    /**\r\n     * Gets how many ticks the current duck has nested for.\r\n     */\r\n    private nestingTime = 0;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        super(gameState, imageName, x, y);\r\n\r\n        this.image.setInteractive({ cursor: 'pointer'});\r\n        this.image.depth = y + 200;\r\n    }\r\n\r\n    onPointerDown(pointer: Phaser.Input.Pointer) {\r\n        this.gameState.pointerHandled = true;\r\n\r\n        if (this.nestingDuck != null) {\r\n            this.gameState.uiScene.displayToast(\"A duck is already nesting there.\");\r\n            return;\r\n        }\r\n\r\n        // choose a random non duckling\r\n        const ducks = this.gameState.fetchDucks().filter(f => f.duckType !== 'duckling');\r\n        if (ducks.length > 0) {\r\n            const duck = randomElement(ducks);\r\n            this.nestingDuck = duck;\r\n            this.gameState.uiScene.displayToast(`${duck.name} is feeling broody`);\r\n            this.nestingTime = 0;\r\n            duck.sendToNest(this);\r\n        }\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Nest;\r\n    }\r\n\r\n    destroy() {\r\n        console.log (\"nest destroyed!!!\");\r\n        console.trace();\r\n        super.destroy();\r\n    }\r\n\r\n    update() {\r\n\r\n        if (this.nestingDuck == null) {\r\n            return;\r\n        }\r\n\r\n        \r\n        if (this.distanceFromEntity(this.nestingDuck) < 2.5) {\r\n            this.nestingTime++;\r\n        }\r\n\r\n        if (this.nestingTime === 20) {\r\n            this.gameState.uiScene.displayToast(`${this.nestingDuck.name} has just started nesting`);\r\n        }\r\n        if (this.nestingTime === Math.floor(Nest.NESTING_DURATION * .5)) {\r\n            this.gameState.uiScene.displayToast(`${this.nestingDuck.name} has a while left to nest`);\r\n        }\r\n        if (this.nestingTime === Math.floor(Nest.NESTING_DURATION * 0.9)) {\r\n            this.gameState.uiScene.displayToast(`${this.nestingDuck.name} is feeling some rustling`);\r\n        }\r\n        if (this.nestingTime > Nest.NESTING_DURATION) {\r\n            this.nestingDuck.nestingComplete();\r\n\r\n            // generate some ducks\r\n            const ducklingCount = randomInt(5) + 1;\r\n            const names = [];\r\n            let leader = this.nestingDuck;\r\n            for (let i = 0; i < ducklingCount; i++) {\r\n                const duckling = new Duck(this.gameState, this.nestingDuck.x, this.nestingDuck.y, DuckType.random(), true);\r\n                duckling.leaderDuck = leader;\r\n                this.gameState.addEntity(duckling);\r\n                leader = duckling;\r\n                names.push(duckling.name);\r\n            }\r\n            this.gameState.uiScene.displayToast(`${this.nestingDuck.name} brood has hatched ${names.length} ducklings!`);\r\n            names.forEach(name => {\r\n                this.gameState.uiScene.displayToast(`Welcome ${name}`);\r\n            });\r\n\r\n            this.nestingDuck = null;\r\n        }\r\n    }\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { Duck, DuckType } from './duck';\r\nimport { Food } from './food';\r\nimport { GameState } from './gameState';\r\nimport { Nest } from './nest';\r\nimport { randomElement, randomInt } from './utils';\r\n\r\n\r\nconst ZOOM_LEVEL = 0.4;\r\n\r\nexport class GameScene extends Phaser.Scene {\r\n\r\n    gameState: GameState;\r\n\r\n    constructor() {\r\n        super('GameScene');\r\n    }\r\n\r\n    preload() {\r\n        this.gameState = GameState.singleton();\r\n        this.gameState.scene = this;\r\n\r\n        const scene = this as Phaser.Scene;\r\n\r\n        scene.load.json('pond-map', 'assets/pond.json');\r\n        scene.load.spritesheet('duck-white', 'assets/duck-white-spritesheet.png', { frameWidth: 512, frameHeight: 512 });\r\n        scene.load.spritesheet('duck-mallard', 'assets/duck-mallard-spritesheet.png', { frameWidth: 512, frameHeight: 512 });\r\n        scene.load.spritesheet('duck-duckling', 'assets/duck-duckling-spritesheet.png', { frameWidth: 512, frameHeight: 512 });\r\n        scene.load.spritesheet('landscape-tileset', 'assets/landscape-spritesheet.png', { frameWidth: 132, frameHeight: 100 });\r\n        scene.load.spritesheet('water', 'assets/landscapeTiles_066.png', { frameWidth: 132, frameHeight: 100 });\r\n        scene.load.image('nest', 'assets/pan_SE.png');\r\n\r\n        scene.load.image('bread', 'assets/bread_NW.png');\r\n        scene.load.image('breadc', 'assets/bread_cursor.png');\r\n\r\n        scene.load.image('debug', 'assets/debug.png');\r\n        scene.load.image('target', 'assets/target.png');\r\n\r\n        scene.load.audio('quackquack-f', 'assets/quackquack-f.mp3');\r\n        scene.load.json('duck-thoughts', 'assets/duck-thoughts.json');\r\n    }\r\n\r\n    create() {\r\n        window.addEventListener(\"resize\", () => {\r\n            //GameState.singleton().scene.game.scale.resize(window.innerWidth / ZOOM_LEVEL, window.innerHeight / ZOOM_LEVEL);\r\n        }, false);\r\n\r\n        this.input.setDefaultCursor('url(assets/bread_cursor.png), crosshair');\r\n        this.input.on('pointerdown', function (pointer: Phaser.Input.Pointer) {\r\n            if (this.gameState.pointerHandled)\r\n                return;\r\n\r\n            if (pointer.leftButtonDown()) {\r\n                const gameState = this.gameState as GameState;\r\n                const point = this.gameState.scene.cameras.main.getWorldPoint(pointer.x, pointer.y);\r\n                Food.createBread(this.gameState, point.x, point.y + 40);\r\n\r\n                const data = this.gameState.scene.cache.json.get('duck-thoughts');\r\n                gameState.uiScene.displayToast(randomElement(data));\r\n            }\r\n        }, this);\r\n\r\n        this.buildMap();\r\n\r\n        const x_offset = 4550;\r\n        const y_offset = 2000;\r\n\r\n        const startDucks = 7;\r\n        for (let i = 0; i < startDucks; i++) {\r\n            const randomTile = this.gameState.waterTiles[randomInt(this.gameState.waterTiles.length)];\r\n            const randomDuckType = DuckType.random();\r\n\r\n            this.gameState.addEntity(new Duck(this.gameState, randomTile.x, randomTile.y, randomDuckType));\r\n        }\r\n\r\n        Nest.create(this.gameState, 7013, 2144);\r\n\r\n        this.gameState.scene.cameras.main.scrollX = x_offset;\r\n        this.gameState.scene.cameras.main.scrollY = y_offset;\r\n        this.gameState.scene.cameras.main.zoom = ZOOM_LEVEL;\r\n\r\n    }\r\n\r\n    update() {\r\n        this.gameState.update();\r\n        this.gameState.pruneEntities();\r\n    }\r\n\r\n    buildMap() {\r\n        //  Parse the data out of the map\r\n        const data = this.gameState.scene.cache.json.get('pond-map');\r\n\r\n        const tileWidth = data.tilewidth;\r\n        const tileHeight = data.tileheight;\r\n\r\n        const tileWidthHalf = tileWidth / 2;\r\n        const tileHeightHalf = tileHeight / 2;\r\n\r\n        const layer = data.layers[0].data;\r\n\r\n        const mapWidth = data.layers[0].width;\r\n        const mapHeight = data.layers[0].height;\r\n\r\n        const centerX = mapWidth * tileWidthHalf;\r\n        const centerY = 32;\r\n\r\n        let i = 0;\r\n\r\n        for (let y = 0; y < mapHeight; y++) {\r\n            for (let x = 0; x < mapWidth; x++) {\r\n                const id = layer[i] - 1;\r\n\r\n                const tx = (x - y) * tileWidthHalf;\r\n                const ty = (x + y) * tileHeightHalf;\r\n\r\n                let tile: Phaser.GameObjects.Image;\r\n\r\n                // 53 is water\r\n                if (id === 53) {\r\n                    //tile = gameState.scene.add.image(centerX + tx, centerY + ty, 'debug');\r\n\r\n                    // DIRTY HACK - the spritesheet has bleeding in some cases (specifically, I think the sheet is fine, but reading it somehow causes alignment problems).\r\n                    // Usually it's fine but water gets particular ugly at different zoom levels, so swap in a pure tile.\r\n                    tile = this.gameState.scene.add.image(centerX + tx, centerY + ty, 'water');\r\n                    //tile.setVisible(false);\r\n                    this.gameState.waterTiles.push(tile);\r\n                } else {\r\n                    tile = this.gameState.scene.add.image(centerX + tx, centerY + ty, 'landscape-tileset', id);\r\n                }\r\n\r\n                tile.depth = centerY + ty;\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { Duck } from './duck';\r\nimport { GameState } from './gameState';\r\n\r\nconst FONT_FAMILY = 'Perpetua , Georgia, \"Goudy Bookletter 1911\", Times, serif';\r\n\r\nexport class UiScene extends Phaser.Scene {\r\n\r\n\r\n    gameState: GameState;\r\n\r\n    duckInfoObjects: Array<{ destroy(): void }> = [];\r\n\r\n    debugMessage: Phaser.GameObjects.Text;\r\n\r\n    toastMessages: Array<Phaser.GameObjects.Text> = [];\r\n    toastX = 50;\r\n    toastY = 400;\r\n    toastYMargin = 15;\r\n\r\n\r\n    constructor() {\r\n        super({ key: 'UiScene', active: true });\r\n    }\r\n\r\n    preload() {\r\n        this.gameState = GameState.singleton();\r\n        this.gameState.uiScene = this;\r\n\r\n        this.debugMessage = this.addText('');\r\n    }\r\n\r\n    create() {\r\n\r\n        this.startBeginningMessage();\r\n    }\r\n\r\n    update() {\r\n\r\n        let debugMsg = '';\r\n        if (this.gameState.debug.showMouseData) {\r\n            const pointer = this.gameState.fetchPointer();\r\n            const worldPointer = this.gameState.fetchWorldPointerPosition();\r\n            debugMsg += `Mouse: (${pointer.x.toFixed(2)}, ${pointer.y.toFixed(2)}) World: (${worldPointer.x.toFixed(2)}, ${worldPointer.y.toFixed(2)})`;\r\n        }\r\n\r\n        if (debugMsg !== '') {\r\n            this.debugMessage.text = debugMsg;\r\n        }\r\n\r\n    }\r\n\r\n    startBeginningMessage() {\r\n        const helloMessage = this.addText('Hello. This is your pond.', 6);\r\n        helloMessage.x = this.findMiddleWidth(helloMessage);\r\n        helloMessage.y = (this.cameras.main.height / 4);\r\n        helloMessage.alpha = 0;\r\n        const foodMessage = this.addText('Try feeding a duck. Press on the water.', 4);\r\n        foodMessage.x = this.findMiddleWidth(foodMessage);\r\n        foodMessage.y = (this.cameras.main.height / 4);\r\n        foodMessage.alpha = 0;\r\n\r\n        const timeLine = this.tweens.timeline();\r\n        timeLine.add({\r\n            targets: helloMessage,\r\n            duration: 2000,\r\n            alpha: 1\r\n        })\r\n            .add({\r\n                targets: helloMessage,\r\n                duration: 4000\r\n            })\r\n            .add({\r\n                targets: helloMessage,\r\n                duration: 2000,\r\n                alpha: 0\r\n            })\r\n            // identical tween for a delay\r\n            .add({\r\n                targets: helloMessage,\r\n                duration: 2000,\r\n                alpha: 0\r\n            })\r\n            .add({\r\n                targets: foodMessage,\r\n                duration: 2000,\r\n                alpha: 1\r\n            })\r\n            .add({\r\n                targets: foodMessage,\r\n                duration: 4000\r\n            })\r\n            .add({\r\n                targets: foodMessage,\r\n                duration: 2000,\r\n                alpha: 0\r\n            });\r\n        timeLine.play();\r\n    }\r\n\r\n    addText(text: string, size: number = 2): Phaser.GameObjects.Text {\r\n        const textObject = this.add.text(0, 0, text, { fontFamily: FONT_FAMILY, fontSize: `${size}em` });\r\n        return textObject;\r\n    }\r\n\r\n    addTextWithDuration(text: string, seconds: number, size: number = 2): Phaser.GameObjects.Text {\r\n        const textObject = this.addText(text, size);\r\n        this.time.delayedCall(seconds * 1000, () => { textObject.destroy(); }, null, null);\r\n        return textObject;\r\n    }\r\n\r\n    displayDuckInfo(duck: Duck) {\r\n        this.duckInfoObjects.forEach(element => {\r\n            element.destroy();\r\n        });\r\n\r\n        const name = this.addText(duck.name, 4);\r\n        const title = this.add.text(0, 0, duck.duckling ? \"(a duck in training)\" : \"(the duck)\", { fontFamily: FONT_FAMILY, fontSize: '2em', fontStyle: 'italic' });\r\n        const thought = this.add.text(0, 0, `is thinking about ${duck.thought}`, { fontFamily: FONT_FAMILY, fontSize: '2em', fontStyle: 'italic' });\r\n        name.x = 40;\r\n        name.y = this.cameras.main.height * 0.75;\r\n\r\n        title.y = name.y + name.height - (title.height * 1.25);\r\n        title.x = name.x + name.width + 20;\r\n        thought.x = 80;\r\n        thought.y = name.y + 40;\r\n\r\n        this.duckInfoObjects = [name, title, thought];\r\n    }\r\n\r\n    displayToast(message: string) {\r\n        const delay = 15;\r\n        const toast = this.addText(message);\r\n        this.time.delayedCall(delay * 1000, () => {\r\n            this.toastMessages = this.toastMessages.filter(t => t !== toast);\r\n            toast.destroy();\r\n            this.repositionToasts();\r\n        }, null, null);\r\n        this.toastMessages.push(toast);\r\n        this.repositionToasts();\r\n\r\n    }\r\n\r\n    private repositionToasts() {\r\n        let y = this.toastY;\r\n        this.toastMessages.forEach(toastMessage => {\r\n\r\n            if (y > this.cameras.main.height * 0.75) { // don't display this many toasts\r\n                toastMessage.setVisible(false);\r\n            }\r\n            else {\r\n                toastMessage.setVisible(true);\r\n                toastMessage.y = y;\r\n                toastMessage.x = this.toastX;\r\n                y += this.toastYMargin + toastMessage.height;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private findMiddleWidth(object: { width: number }): number {\r\n        return (this.cameras.main.width / 2) - (object.width / 2);\r\n    }\r\n\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { GameScene } from './gameScene';\r\nimport { UiScene } from './uiScene';\r\n\r\nconst gameConfig: Phaser.Types.Core.GameConfig = {\r\n    title: 'duck-game',\r\n\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n    },\r\n\r\n    parent: \"game-container\",\r\n    width: 1600,\r\n    height: 1200,\r\n\r\n    /*\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: true,\r\n        },\r\n    },\r\n    */\r\n    scene: [ GameScene, UiScene ],\r\n    backgroundColor: '#000000',\r\n};\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    //gameState.scene.game.scale.resize(window.innerWidth / ZOOM_LEVEL, window.innerHeight / ZOOM_LEVEL);\r\n}, false);\r\n\r\n\r\nexport function setupGame(): Phaser.Game {\r\n    const game = new Phaser.Game(gameConfig);\r\n    return game;\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport * as Game from './game/gameRunner'\r\n\r\nGame.setupGame();\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div id=\"game-container\"/>\r\n      </header>\r\n        Learn <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> and <a className=\"App-link\" href=\"https://phaser.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Phaser</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}