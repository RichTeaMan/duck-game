{"version":3,"sources":["game/direction.ts","game/entityType.ts","game/entity.ts","game/duck.ts","game/gameRunner.ts","game/utils.ts","game/food.ts","game/gameState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","name","offset","x","y","opposite","this","west","northWest","north","northEast","east","southEast","south","southWest","map","initialise","EntityType","Entity","gameState","imageName","image","isDestroyed","scene","add","destroy","otherEntity","Phaser","Math","Distance","Between","tileWidthHalf","tileHeightHalf","duckAnims","idle","startFrame","endFrame","speed","walk","feed","die","shoot","Duck","motion","direction","distance","duckType","startX","startY","anim","f","target","animationStep","active","time","delayedCall","changeFrame","delay","depth","startWalkAnimation","random","resetAnimation","frame","texture","get","fetchFood","length","select","distanceFromEntity","max","floor","sort","reverse","startFeedAnimation","dx","dy","angle","atan","abs","xR","cos","yR","sin","total","modX","modY","Food","start","bread","scale","entities","push","GameState","cursors","input","keyboard","createCursorKeys","forEach","entity","update","newEntities","filter","e","entityType","gameConfig","title","type","parent","width","height","preload","load","json","spritesheet","frameWidth","frameHeight","create","setDefaultCursor","on","pointer","cameras","main","scrollX","scrollY","createBread","data","cache","tilewidth","tileheight","layer","layers","mapwidth","mapheight","centerX","i","id","tx","ty","tile","console","log","buildWater","addEntity","x_offset","y_offset","setSize","zoom","pruneEntities","backgroundColor","App","className","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4000c04.chunk.js","sourcesContent":["export class Direction {\r\n\r\n    static west: Direction;\r\n    static northWest: Direction;\r\n    static north: Direction;\r\n    static northEast: Direction;\r\n    static east: Direction;\r\n    static southEast: Direction;\r\n    static south: Direction;\r\n    static southWest: Direction;\r\n\r\n    static map: Direction[];\r\n\r\n    static initialise() {\r\n\r\n        Direction.west = new Direction('west', 0, -2, 0);\r\n        Direction.northWest = new Direction('northWest', 32, -2, -1);\r\n        Direction.north = new Direction('north', 64, 0, -2);\r\n        Direction.northEast = new Direction('northEast', 96, 2, -1);\r\n        Direction.east = new Direction('east', 128, 2, 0);\r\n        Direction.southEast = new Direction('southEast', 160, 2, 1);\r\n        Direction.south = new Direction('south', 192, 0, 2);\r\n        Direction.southWest = new Direction('southWest', 224, -2, 1);\r\n\r\n        Direction.west.opposite = Direction.east;\r\n        Direction.northWest.opposite = Direction.southEast;\r\n        Direction.north.opposite = Direction.south;\r\n        Direction.northEast.opposite = Direction.southWest;\r\n        Direction.east.opposite = Direction.west;\r\n        Direction.southEast.opposite = Direction.northWest;\r\n        Direction.south.opposite = Direction.north;\r\n        Direction.southWest.opposite = Direction.northEast;\r\n\r\n        Direction.map = [];\r\n        Direction.map[Direction.west.name] = Direction.west;\r\n        Direction.map[Direction.northWest.name] = Direction.northWest;\r\n        Direction.map[Direction.north.name] = Direction.north;\r\n        Direction.map[Direction.northEast.name] = Direction.northEast;\r\n        Direction.map[Direction.east.name] = Direction.east;\r\n        Direction.map[Direction.southEast.name] = Direction.southEast;\r\n        Direction.map[Direction.south.name] = Direction.south;\r\n        Direction.map[Direction.southWest.name] = Direction.southWest;\r\n    }\r\n\r\n    static get(name: string): Direction {\r\n        return Direction.map[name];\r\n    }\r\n\r\n    name: string;\r\n    offset: number;\r\n    x: number;\r\n    y: number;\r\n    opposite: Direction;\r\n\r\n    constructor(name: string, offset: number, x: number, y: number) {\r\n        this.name = name;\r\n        this.offset = offset;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nDirection.initialise();\r\n","export enum EntityType {\r\n    Food,\r\n    Duck\r\n}","import { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport abstract class Entity {\r\n\r\n    image: Phaser.GameObjects.Image;\r\n    isDestroyed = false;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        this.image = gameState.scene.add.image(x, y, imageName);\r\n    }\r\n\r\n    abstract entityType(): EntityType;\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n        if (this.image)\r\n            this.image.destroy();\r\n    }\r\n\r\n    distanceFromEntity(otherEntity: Entity) {\r\n        return Phaser.Math.Distance.Between(this.x, this.y, otherEntity.x, otherEntity.y);\r\n    }\r\n\r\n    get x() {\r\n        return this.image.x;\r\n    }\r\n    set x(x: number) {\r\n        this.image.x = x;\r\n    }\r\n\r\n    get y() {\r\n        return this.image.y;\r\n    }\r\n    set y(y: number) {\r\n        this.image.y = y;\r\n    }\r\n}\r\n","import { Direction } from \"./direction\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\nimport { randomInt } from \"./utils\";\r\n\r\nconst duckAnims = {\r\n    idle: {\r\n        startFrame: 0,\r\n        endFrame: 4,\r\n        speed: 0.2\r\n    },\r\n    walk: {\r\n        startFrame: 0,\r\n        endFrame: 4,\r\n        speed: 0.10\r\n    },\r\n    feed: {\r\n        startFrame: 5,\r\n        endFrame: 7,\r\n        speed: 0.8\r\n    },\r\n    die: {\r\n        startFrame: 20,\r\n        endFrame: 28,\r\n        speed: 0.2\r\n    },\r\n    shoot: {\r\n        startFrame: 28,\r\n        endFrame: 32,\r\n        speed: 0.1\r\n    }\r\n};\r\n\r\nexport class Duck extends Entity {\r\n\r\n    startX: number;\r\n    startY: number;\r\n    distance: number;\r\n\r\n    motion: any;\r\n    anim: any;\r\n    direction: Direction;\r\n    speed: number;\r\n\r\n    /**\r\n     * Frame.\r\n     */\r\n    f: number;\r\n\r\n    target: Entity = null;\r\n\r\n    gameState: GameState;\r\n\r\n    animationStep = 1;\r\n\r\n    active = true;\r\n\r\n    constructor(gameState: GameState, x: number, y: number, motion, direction: Direction, distance, duckType = 'duck') {\r\n        super(gameState, duckType, x, y)//, direction.offset + anims[motion].startFrame)\r\n\r\n        this.startX = x;\r\n        this.startY = y;\r\n        this.distance = distance;\r\n        this.motion = motion;\r\n        this.anim = duckAnims[motion];\r\n        this.direction = direction;\r\n        this.speed = this.anim.speed;\r\n        this.f = this.anim.startFrame;\r\n        this.gameState = gameState;\r\n\r\n        this.gameState.scene.time.delayedCall(this.anim.speed * 1000, this.changeFrame, [], this);\r\n    };\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Duck;\r\n    }\r\n\r\n    startWalkAnimation() {\r\n        this.f = duckAnims['walk'].startFrame;\r\n        this.anim = duckAnims['walk'];\r\n        this.animationStep = 1;\r\n        this.motion = 'walk';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    startFeedAnimation() {\r\n        this.f = duckAnims['feed'].startFrame;\r\n        this.anim = duckAnims['feed'];\r\n        this.animationStep = 1;\r\n        this.motion = 'feed';\r\n        this.changeFrame();\r\n        this.active = false;\r\n    }\r\n\r\n    changeFrame() {\r\n\r\n        let delay = this.anim.speed;\r\n        this.image.depth = this.y + 64;\r\n\r\n        if (this.f > this.anim.endFrame || this.f < 0) {\r\n            switch (this.motion) {\r\n                case 'walk':\r\n                    this.animationStep = -this.animationStep;\r\n                    this.f += 2 * this.animationStep;\r\n                    break;\r\n\r\n                case 'feed':\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.startWalkAnimation, [], this);\r\n                    return;\r\n\r\n                case 'idle':\r\n                    delay = 0.5 + Math.random();\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.resetAnimation, [], this);\r\n                    break;\r\n\r\n                case 'die':\r\n                    delay = 6 + Math.random() * 6;\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.resetAnimation, [], this);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.image.frame = this.image.texture.get(this.direction.offset + this.f);\r\n        this.gameState.scene.time.delayedCall(delay * 1000, this.changeFrame, [], this);\r\n        this.f += this.animationStep;\r\n    }\r\n\r\n    resetAnimation() {\r\n        //this.f = this.anim.startFrame;\r\n\r\n        //this.frame = this.texture.get(this.direction.offset + this.f);\r\n\r\n        //scene.time.delayedCall(this.anim.speed * 1000, this.changeFrame, [], this);\r\n    }\r\n\r\n    update() {\r\n        if (!this.active)\r\n            return;\r\n\r\n        // is there bread close by?\r\n        if (this.target == null && this.gameState.fetchFood().length > 0) {\r\n            const breadList = this.gameState.fetchFood().map(f => ({ distance: this.distanceFromEntity(f) + randomInt(30), target: f }));\r\n            const select = breadList.sort(f => f.distance).reverse()[0];\r\n            if (select.distance < 250) {\r\n                this.target = select.target;\r\n            }\r\n        }\r\n\r\n        if (this.target) {\r\n            if (this.target.isDestroyed) {\r\n                this.target = null;\r\n                return;\r\n            }\r\n\r\n            if (this.distanceFromEntity(this.target) < 2.5) {\r\n                this.target.destroy();\r\n\r\n                // feed animation\r\n                this.startFeedAnimation();\r\n                return;\r\n            }\r\n\r\n            const velocity = 0.05;\r\n            const dx = this.target.x - this.x;\r\n            const dy = this.target.y - this.y;\r\n\r\n            const angle = Math.atan(Math.abs(dx) / Math.abs(dy));\r\n            let xR = Math.cos(angle);\r\n            let yR = Math.sin(angle);\r\n\r\n            const total = xR + yR;\r\n            const modX = (dx / total) * velocity;\r\n            const modY = (dy / total) * velocity;\r\n\r\n            if (dx < 0 && xR > 0) {\r\n                xR = -xR;\r\n            }\r\n            if (dy < 0 && yR > 0) {\r\n                yR = -yR;\r\n            }\r\n\r\n            this.x += modX;\r\n            this.y += modY;\r\n        }\r\n        else {\r\n\r\n            this.x += this.direction.x * this.speed;\r\n\r\n            if (this.direction.y !== 0) {\r\n                this.y += this.direction.y * this.speed;\r\n                this.image.depth = this.y + 64;\r\n            }\r\n\r\n            //  Walked far enough?\r\n            if (Phaser.Math.Distance.Between(this.startX, this.startY, this.x, this.y) >= this.distance) {\r\n                this.direction = this.direction.opposite;\r\n                this.image.frame = this.image.texture.get(this.direction.offset + this.f);\r\n                this.startX = this.x;\r\n                this.startY = this.y;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { Direction } from './direction';\r\nimport { Duck } from './duck';\r\nimport { Food } from './food';\r\nimport { GameState } from './gameState';\r\n\r\nlet tileWidthHalf;\r\nlet tileHeightHalf;\r\n\r\nlet gameState: GameState;\r\n\r\nconst gameConfig: Phaser.Types.Core.GameConfig = {\r\n    title: 'Sample',\r\n\r\n    type: Phaser.AUTO,\r\n\r\n    parent: \"game-container\",\r\n    width: 1600,\r\n    height: 1200,\r\n\r\n    /*\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: true,\r\n        },\r\n    },\r\n    */\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    },\r\n\r\n    backgroundColor: '#000000',\r\n};\r\n\r\nfunction preload() {\r\n    this.load.json('pond-map', 'assets/pond.json');\r\n    this.load.image('water', 'assets/water.png');\r\n    this.load.spritesheet('duck', 'assets/duck-white-spritesheet.png', { frameWidth: 128, frameHeight: 128 });\r\n    this.load.spritesheet('mallard', 'assets/duck-mallard-spritesheet.png', { frameWidth: 128, frameHeight: 128 });\r\n    this.load.spritesheet('landscape-tileset', 'assets/landscape-spritesheet.png', { frameWidth: 132, frameHeight: 100 });\r\n\r\n    this.load.image('bread', 'assets/bread_NW.png');\r\n}\r\n\r\nfunction create() {\r\n    gameState = new GameState(this);\r\n\r\n    this.input.setDefaultCursor('url(assets/bread_cursor.png), pointer');\r\n    this.input.on('pointerdown', function (pointer: Phaser.Input.Pointer) {\r\n\r\n        const x = pointer.x + gameState.scene.cameras.main.scrollX;\r\n        const y = pointer.y + gameState.scene.cameras.main.scrollY + 40;\r\n\r\n        Food.createBread(gameState, x, y);\r\n    }, this);\r\n\r\n    buildWater();\r\n\r\n    const x_offset = 1750;\r\n    const y_offset = 600;\r\n\r\n    gameState.addEntity(new Duck(gameState, x_offset + 240, y_offset + 490, 'walk', Direction.get('southEast'), 100));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 100, y_offset + 580, 'walk', Direction.get('southEast'), 230));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 620, y_offset + 340, 'walk', Direction.get('south'), 380));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 460, y_offset + 380, 'walk', Direction.get('south'), 150));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 760, y_offset + 300, 'walk', Direction.get('southEast'), 670));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 800, y_offset + 340, 'walk', Direction.get('northWest'), 800, 'mallard'));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 750, y_offset + 680, 'walk', Direction.get('east'), 200));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 1030, y_offset + 500, 'walk', Direction.get('west'), 100, 'mallard'));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 1180, y_offset + 540, 'walk', Direction.get('northEast'), 420));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 1180, y_offset + 380, 'walk', Direction.get('southEast'), 160));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 1450, y_offset + 520, 'walk', Direction.get('southWest'), 320, 'mallard'));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 1500, y_offset + 540, 'walk', Direction.get('southWest'), 340));\r\n    gameState.addEntity(new Duck(gameState, x_offset + 1550, y_offset + 560, 'walk', Direction.get('southWest'), 330, 'mallard'));\r\n\r\n    gameState.scene.cameras.main.setSize(1600, 1200);\r\n\r\n    gameState.scene.cameras.main.scrollX = x_offset;\r\n    gameState.scene.cameras.main.scrollY = y_offset;\r\n    gameState.scene.cameras.main.zoom = 0.75;\r\n}\r\n\r\nfunction update() {\r\n    gameState.update();\r\n    gameState.pruneEntities();\r\n}\r\n\r\nfunction buildWater() {\r\n    //  Parse the data out of the map\r\n    var data = gameState.scene.cache.json.get('pond-map');\r\n\r\n    var tilewidth = data.tilewidth;\r\n    var tileheight = data.tileheight;\r\n\r\n    tileWidthHalf = tilewidth / 2;\r\n    tileHeightHalf = tileheight / 2;\r\n\r\n    var layer = data.layers[0].data;\r\n\r\n    var mapwidth = data.layers[0].width;\r\n    var mapheight = data.layers[0].height;\r\n\r\n    var centerX = mapwidth * tileWidthHalf;\r\n    var centerY = 16;\r\n\r\n    var i = 0;\r\n\r\n    for (var y = 0; y < mapheight; y++) {\r\n        for (var x = 0; x < mapwidth; x++) {\r\n            const id = layer[i] - 1;\r\n\r\n            var tx = (x - y) * tileWidthHalf;\r\n            var ty = (x + y) * tileHeightHalf;\r\n\r\n            var tile = gameState.scene.add.image(centerX + tx, centerY + ty, 'landscape-tileset', id);\r\n\r\n            tile.depth = centerY + ty;\r\n            console.log(tile.depth);\r\n            i++;\r\n        }\r\n    }\r\n}\r\n\r\nexport function setupGame(): Phaser.Game {\r\n    const game = new Phaser.Game(gameConfig);\r\n    return game;\r\n}\r\n","export function randomInt(max: number): number {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class Food extends Entity {\r\n\r\n    static createBread(gameState: GameState, x: number, y: number): Food {\r\n\r\n        const bread = new Food(gameState, 'bread', x, y);\r\n        bread.image.scale = 0.2;\r\n        gameState.entities.push(bread);\r\n        return bread;\r\n    }\r\n\r\n    start = 0;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        super(gameState, imageName, x, y);\r\n\r\n        this.image.depth = y + 32;\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Food;\r\n    }\r\n\r\n    update() {\r\n        this.start++;\r\n\r\n        if (this.start > 200) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { Food } from \"./food\";\r\n\r\nexport class GameState {\r\n\r\n    scene: Phaser.Scene;\r\n    cursors: Phaser.Types.Input.Keyboard.CursorKeys;\r\n    entities: Array<Entity> = [];\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this.scene = scene;\r\n        this.cursors = scene.input.keyboard.createCursorKeys();\r\n    }\r\n\r\n    update() {\r\n        this.entities.forEach(entity => {\r\n            entity.update();\r\n        })\r\n    }\r\n\r\n    pruneEntities() {\r\n\r\n        const newEntities: Array<Entity> = [];\r\n        this.entities.forEach(entity => {\r\n            if (!entity.isDestroyed) {\r\n                newEntities.push(entity);\r\n            }\r\n        });\r\n        this.entities = newEntities;\r\n    }\r\n\r\n    fetchFood(): Food[] {\r\n        return this.entities.filter(e => e.entityType() === EntityType.Food) as Food[];\r\n    }\r\n\r\n    addEntity(entity: Entity) {\r\n\r\n        this.entities.push(entity);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport * as Game from './game/gameRunner'\r\n\r\nGame.setupGame();\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div id=\"game-container\"/>\r\n      </header>\r\n        Learn <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> and <a className=\"App-link\" href=\"https://phaser.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Phaser</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}