{"version":3,"sources":["game/utils.ts","game/direction.ts","game/entity.ts","game/entityType.ts","game/invisibleTarget.ts","game/duck.ts","game/gameRunner.ts","game/food.ts","game/gameState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomInt","max","Math","floor","random","Direction","name","offset","x","y","opposite","this","west","northWest","north","northEast","east","southEast","south","southWest","map","list","push","i","length","vector","angle","Phaser","Angle","Between","abs","quad","initialise","EntityType","Entity","gameState","imageName","image","isDestroyed","scene","add","destroy","otherEntity","Distance","entity","speed","vectorToTarget","dx","dy","xR","cos","yR","sin","total","modX","modY","console","error","RadToDeg","Vector2","InvisibleTarget","depth","setVisible","debug","showTargets","Invisible","duckAnims","idle","startFrame","endFrame","walk","feed","die","shoot","DuckType","duckTypes","tileWidthHalf","tileHeightHalf","Duck","duckType","motion","anim","direction","f","target","animationStep","active","idleTicks","time","delayedCall","changeFrame","delay","startWalkAnimation","resetAnimation","frame","texture","get","isPointWater","entityType","Food","fetchFood","select","distance","distanceFromEntity","sort","reverse","vectorToEntity","waterTile","array","waterTiles","addEntity","determineFromVector","startFeedAnimation","start","bread","scale","entities","GameState","cursors","input","keyboard","createCursorKeys","forEach","update","newEntities","filter","e","r","getBounds","rectangle","width","height","contains","gameConfig","title","type","mode","FIT","parent","preload","load","json","spritesheet","frameWidth","frameHeight","create","setDefaultCursor","on","pointer","point","cameras","main","getWorldPoint","createBread","data","cache","tileWidth","tilewidth","tileHeight","tileheight","layer","layers","mapWidth","mapHeight","centerX","id","tx","ty","tile","log","buildMap","randomTile","randomDuckType","scrollX","scrollY","zoom","pruneEntities","backgroundColor","window","addEventListener","game","resize","innerWidth","innerHeight","App","className","href","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.239f23dc.chunk.js","sourcesContent":["export function randomInt(max: number): number {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport function randomElement<T>(array: Array<T>) : T {\r\n    const i = randomInt(array.length);\r\n    return array[i];\r\n}","import { randomInt } from \"./utils\";\r\n\r\nexport class Direction {\r\n\r\n    static west: Direction;\r\n    static northWest: Direction;\r\n    static north: Direction;\r\n    static northEast: Direction;\r\n    static east: Direction;\r\n    static southEast: Direction;\r\n    static south: Direction;\r\n    static southWest: Direction;\r\n\r\n    static map: Direction[];\r\n    static list: Direction[];\r\n\r\n    static initialise() {\r\n\r\n        Direction.west = new Direction('west', 0, -2, 0);\r\n        Direction.northWest = new Direction('northWest', 32, -2, -1);\r\n        Direction.north = new Direction('north', 64, 0, -2);\r\n        Direction.northEast = new Direction('northEast', 96, 2, -1);\r\n        Direction.east = new Direction('east', 128, 2, 0);\r\n        Direction.southEast = new Direction('southEast', 160, 2, 1);\r\n        Direction.south = new Direction('south', 192, 0, 2);\r\n        Direction.southWest = new Direction('southWest', 224, -2, 1);\r\n\r\n        Direction.west.opposite = Direction.east;\r\n        Direction.northWest.opposite = Direction.southEast;\r\n        Direction.north.opposite = Direction.south;\r\n        Direction.northEast.opposite = Direction.southWest;\r\n        Direction.east.opposite = Direction.west;\r\n        Direction.southEast.opposite = Direction.northWest;\r\n        Direction.south.opposite = Direction.north;\r\n        Direction.southWest.opposite = Direction.northEast;\r\n\r\n        Direction.map = [];\r\n        Direction.map[Direction.west.name] = Direction.west;\r\n        Direction.map[Direction.northWest.name] = Direction.northWest;\r\n        Direction.map[Direction.north.name] = Direction.north;\r\n        Direction.map[Direction.northEast.name] = Direction.northEast;\r\n        Direction.map[Direction.east.name] = Direction.east;\r\n        Direction.map[Direction.southEast.name] = Direction.southEast;\r\n        Direction.map[Direction.south.name] = Direction.south;\r\n        Direction.map[Direction.southWest.name] = Direction.southWest;\r\n\r\n        Direction.list = [];\r\n        Direction.list.push(Direction.west);\r\n        Direction.list.push(Direction.northWest);\r\n        Direction.list.push(Direction.north);\r\n        Direction.list.push(Direction.northEast);\r\n        Direction.list.push(Direction.east);\r\n        Direction.list.push(Direction.southEast);\r\n        Direction.list.push(Direction.south);\r\n        Direction.list.push(Direction.southWest);\r\n    }\r\n\r\n    static get(name: string): Direction {\r\n        return Direction.map[name];\r\n    }\r\n\r\n    static random(): Direction {\r\n        const i = randomInt(Direction.list.length);\r\n        return Direction.list[i];\r\n    }\r\n\r\n    static determineFromVector(vector: Phaser.Math.Vector2) {\r\n\r\n        const angle = Phaser.Math.Angle.Between(0, 0, Math.abs(vector.x), Math.abs(vector.y));\r\n\r\n        let quad = [];\r\n\r\n        // calculate quads for annoying trig and negative sign reasons. In phaser, 0,0 is top left so Y is inverted.\r\n\r\n        // top left quad\r\n        if (vector.x >= 0 && vector.y < 0) {\r\n            quad = [Direction.east, Direction.northEast, Direction.north];\r\n        }\r\n        // bottom left\r\n        else if (vector.x >= 0 && vector.y >= 0) {\r\n            quad = [Direction.east, Direction.southEast, Direction.south];\r\n        }\r\n        // top right\r\n        else if (vector.x < 0 && vector.y < 0) {\r\n            quad = [Direction.west, Direction.northWest, Direction.north];\r\n        }\r\n        // bottom right\r\n        else if (vector.x < 0 && vector.y >= 0) {\r\n            quad = [Direction.west, Direction.southWest, Direction.south];\r\n        }\r\n\r\n        let i = 0;\r\n        if (angle > 1.178097) { // 67.5 deg\r\n            i = 2;\r\n        }\r\n        else if (angle > 0.3926991) { // 22.5 deg\r\n            i = 1;\r\n        }\r\n\r\n        const direction = quad[i];\r\n        return direction;\r\n    }\r\n\r\n    name: string;\r\n    offset: number;\r\n    x: number;\r\n    y: number;\r\n    opposite: Direction;\r\n\r\n    constructor(name: string, offset: number, x: number, y: number) {\r\n        this.name = name;\r\n        this.offset = offset;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nDirection.initialise();\r\n","import { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport abstract class Entity {\r\n\r\n    image: Phaser.GameObjects.Image;\r\n    isDestroyed = false;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        this.image = gameState.scene.add.image(x, y, imageName);\r\n    }\r\n\r\n    abstract entityType(): EntityType;\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n        if (this.image)\r\n            this.image.destroy();\r\n    }\r\n\r\n    distanceFromEntity(otherEntity: Entity) {\r\n        return Phaser.Math.Distance.Between(this.x, this.y, otherEntity.x, otherEntity.y);\r\n    }\r\n\r\n    vectorToEntity(entity: Entity, speed: number) {\r\n        return this.vectorToTarget(entity.x, entity.y, speed);\r\n    }\r\n\r\n    vectorToTarget(x: number, y: number, speed: number) {\r\n\r\n        const dx = x - this.x;\r\n        const dy = y - this.y;\r\n\r\n        const angle = Phaser.Math.Angle.Between(this.x, this.y, x, y);\r\n        let xR = Math.cos(angle);\r\n        let yR = Math.sin(angle);\r\n\r\n        const total =  Math.abs(xR) + Math.abs(yR);\r\n        let modX = (xR / total) * speed;\r\n        let modY = (yR / total) * speed;\r\n\r\n        if (modX > 10 || modY > 10) {\r\n\r\n            console.error(`Spurious vectorToTargetResult - C: ${x}, ${y} | A: ${Phaser.Math.RadToDeg(angle)} | ${dx}, ${dy} | ${modX}, ${modY}`);\r\n\r\n            if (modX > speed) {\r\n                modX = speed;\r\n            }\r\n            else if (modX < -speed) {\r\n                modX = -speed;\r\n            }\r\n\r\n            if (modY > speed) {\r\n                modY = speed;\r\n            }\r\n            else if (modY < -speed) {\r\n                modY = -speed;\r\n            }\r\n        }\r\n        return new Phaser.Math.Vector2(modX, modY);\r\n    }\r\n\r\n    get x() {\r\n        return this.image.x;\r\n    }\r\n    set x(x: number) {\r\n        this.image.x = x;\r\n    }\r\n\r\n    get y() {\r\n        return this.image.y;\r\n    }\r\n    set y(y: number) {\r\n        this.image.y = y;\r\n    }\r\n}\r\n","export enum EntityType {\r\n    Food,\r\n    Duck,\r\n    Invisible\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class InvisibleTarget extends Entity {\r\n\r\n    constructor(gameState: GameState, x: number, y: number) {\r\n        super(gameState, 'target', x, y);\r\n\r\n        this.image.depth = 2000;\r\n        this.image.setVisible(gameState.debug.showTargets);\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Invisible;\r\n    }\r\n\r\n    update() {\r\n    }\r\n}\r\n","import { Direction } from \"./direction\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\nimport { InvisibleTarget } from \"./invisibleTarget\";\r\nimport { randomElement, randomInt } from \"./utils\";\r\n\r\nconst duckAnims = {\r\n    idle: {\r\n        startFrame: 0,\r\n        endFrame: 4,\r\n        speed: 0.2\r\n    },\r\n    walk: {\r\n        startFrame: 0,\r\n        endFrame: 4,\r\n        speed:  0.10\r\n    },\r\n    feed: {\r\n        startFrame: 5,\r\n        endFrame: 7,\r\n        speed: 0.8\r\n    },\r\n    die: {\r\n        startFrame: 20,\r\n        endFrame: 28,\r\n        speed: 0.2\r\n    },\r\n    shoot: {\r\n        startFrame: 28,\r\n        endFrame: 32,\r\n        speed: 0.1\r\n    }\r\n};\r\n\r\nexport class DuckType {\r\n    static duckTypes = [\r\n        \"white\",\r\n        \"mallard\"];\r\n\r\n    static random() {\r\n        return DuckType.duckTypes[randomInt(DuckType.duckTypes.length)];\r\n    }\r\n}\r\n\r\nexport class Duck extends Entity {\r\n\r\n    motion: any;\r\n    anim: any;\r\n    direction: Direction = Direction.random();\r\n    speed: number;\r\n\r\n    /**\r\n     * Frame.\r\n     */\r\n    f: number;\r\n\r\n    target: Entity = null;\r\n    vector: Phaser.Math.Vector2 = null;\r\n\r\n    gameState: GameState;\r\n\r\n    animationStep = 1;\r\n\r\n    active = true;\r\n\r\n    idleTicks = 0;\r\n\r\n    constructor(gameState: GameState, x: number, y: number, duckType: string) {\r\n        super(gameState, `duck-${duckType}`, x, y);\r\n\r\n        this.motion = 'walk';\r\n        this.anim = duckAnims[this.motion];\r\n        this.speed = this.anim.speed;\r\n        this.f = this.anim.startFrame;\r\n        this.gameState = gameState;\r\n\r\n        this.gameState.scene.time.delayedCall(this.anim.speed * 1000, this.changeFrame, [], this);\r\n    };\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Duck;\r\n    }\r\n\r\n    startWalkAnimation() {\r\n        this.f = duckAnims['walk'].startFrame;\r\n        this.anim = duckAnims['walk'];\r\n        this.animationStep = 1;\r\n        this.motion = 'walk';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    startFeedAnimation() {\r\n        this.f = duckAnims['feed'].startFrame;\r\n        this.anim = duckAnims['feed'];\r\n        this.animationStep = 1;\r\n        this.motion = 'feed';\r\n        this.changeFrame();\r\n        this.active = false;\r\n    }\r\n\r\n    changeFrame() {\r\n\r\n        let delay = this.anim.speed;\r\n        this.image.depth = this.y + 256;\r\n\r\n        if (this.f > this.anim.endFrame || this.f < 0) {\r\n            switch (this.motion) {\r\n                case 'walk':\r\n                    this.animationStep = -this.animationStep;\r\n                    this.f += 2 * this.animationStep;\r\n                    break;\r\n\r\n                case 'feed':\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.startWalkAnimation, [], this);\r\n                    return;\r\n\r\n                case 'idle':\r\n                    delay = 0.5 + Math.random();\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.resetAnimation, [], this);\r\n                    break;\r\n\r\n                case 'die':\r\n                    delay = 6 + Math.random() * 6;\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.resetAnimation, [], this);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.image.frame = this.image.texture.get(this.direction.offset + this.f);\r\n        this.gameState.scene.time.delayedCall(delay * 1000, this.changeFrame, [], this);\r\n        this.f += this.animationStep;\r\n    }\r\n\r\n    resetAnimation() {\r\n        //this.f = this.anim.startFrame;\r\n\r\n        //this.frame = this.texture.get(this.direction.offset + this.f);\r\n\r\n        //scene.time.delayedCall(this.anim.speed * 1000, this.changeFrame, [], this);\r\n    }\r\n\r\n    /**\r\n     * Moves the duck by the given amount, or returns false is fuck a movement isn't possible.\r\n     * @param modX Amount to move duck by.\r\n     * @param modY Amount to move duck by.\r\n     */\r\n    move(modX: number, modY: number): boolean {\r\n\r\n        if (this.gameState.isPointWater(this.x + modX, this.y + modY)) {\r\n            this.x += modX;\r\n            this.y += modY;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    update() {\r\n        if (!this.active)\r\n            return;\r\n\r\n        // find a target\r\n        if (this.target == null || this.target.isDestroyed || this.target.entityType() !== EntityType.Food) {\r\n\r\n            // look for food\r\n            if (this.gameState.fetchFood().length > 0) {\r\n                const breadList = this.gameState.fetchFood().map(f => ({ distance: this.distanceFromEntity(f) + randomInt(30), target: f }));\r\n                const select = breadList.sort(f => f.distance).reverse()[0];\r\n                if (select.distance < 250) {\r\n\r\n                    this.target?.destroy();\r\n                    this.target = select.target;\r\n                    this.vector = this.vectorToEntity(this.target, 5);\r\n                }\r\n            }\r\n\r\n            // find a random point to swim too\r\n            if (this.target == null) {\r\n                // no bread, swim to random target\r\n                const waterTile = randomElement(this.gameState.waterTiles);\r\n                this.target = this.gameState.addEntity(new InvisibleTarget(this.gameState, waterTile.x, waterTile.y));\r\n\r\n                this.vector = this.vectorToEntity(this.target, 1);\r\n            }\r\n            this.direction = Direction.determineFromVector(this.vector);\r\n        }\r\n\r\n        if (this.distanceFromEntity(this.target) < 2.5) {\r\n            this.target.destroy();\r\n\r\n            if (this.target.entityType() === EntityType.Food) {\r\n                this.startFeedAnimation();\r\n            }\r\n            this.target = null;\r\n            return;\r\n        }\r\n\r\n        this.x += this.vector.x;\r\n        this.y += this.vector.y;\r\n        this.image.depth = this.y + 128;\r\n    }\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { Duck, DuckType } from './duck';\r\nimport { Food } from './food';\r\nimport { GameState } from './gameState';\r\nimport { randomInt } from './utils';\r\n\r\nlet tileWidthHalf;\r\nlet tileHeightHalf;\r\n\r\nlet gameState: GameState;\r\n\r\nconst ZOOM_LEVEL = 0.4;\r\n\r\nconst gameConfig: Phaser.Types.Core.GameConfig = {\r\n    title: 'duck-game',\r\n\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n    },\r\n\r\n    parent: \"game-container\",\r\n    width: 1600,\r\n    height: 1200,\r\n\r\n    /*\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: true,\r\n        },\r\n    },\r\n    */\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    },\r\n    backgroundColor: '#000000',\r\n};\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    gameState.scene.game.scale.resize(window.innerWidth / ZOOM_LEVEL, window.innerHeight / ZOOM_LEVEL);\r\n}, false);\r\n\r\nfunction preload() {\r\n    const scene = this as Phaser.Scene;\r\n\r\n    scene.load.json('pond-map', 'assets/pond.json');\r\n    scene.load.spritesheet('duck-white', 'assets/duck-white-spritesheet.png', { frameWidth: 128, frameHeight: 128 });\r\n    scene.load.spritesheet('duck-mallard', 'assets/duck-mallard-spritesheet.png', { frameWidth: 128, frameHeight: 128 });\r\n    scene.load.spritesheet('landscape-tileset', 'assets/landscape-spritesheet.png', { frameWidth: 132, frameHeight: 100 });\r\n    scene.load.spritesheet('water', 'assets/landscapeTiles_066.png', { frameWidth: 132, frameHeight: 100 });\r\n\r\n    scene.load.image('bread', 'assets/bread_NW.png');\r\n    scene.load.image('breadc', 'assets/bread_cursor.png');\r\n\r\n    scene.load.image('debug', 'assets/debug.png');\r\n}\r\n\r\nfunction create() {\r\n    gameState = new GameState(this);\r\n\r\n    this.input.setDefaultCursor('url(assets/bread_cursor.png), pointer');\r\n    this.input.on('pointerdown', function (pointer: Phaser.Input.Pointer) {\r\n\r\n        const point = gameState.scene.cameras.main.getWorldPoint(pointer.x, pointer.y);\r\n        Food.createBread(gameState, point.x, point.y + 40);\r\n    }, this);\r\n\r\n    buildMap();\r\n\r\n    const x_offset = 4550;\r\n    const y_offset = 2000;\r\n\r\n    const startDucks = 7;\r\n    for (let i = 0; i < startDucks; i++) {\r\n        const randomTile = gameState.waterTiles[randomInt(gameState.waterTiles.length)];\r\n        const randomDuckType = DuckType.random();\r\n\r\n        gameState.addEntity(new Duck(gameState, randomTile.x, randomTile.y, randomDuckType));\r\n    }\r\n\r\n    gameState.scene.cameras.main.scrollX = x_offset;\r\n    gameState.scene.cameras.main.scrollY = y_offset;\r\n    gameState.scene.cameras.main.zoom = ZOOM_LEVEL;\r\n}\r\n\r\nfunction update() {\r\n    gameState.update();\r\n    gameState.pruneEntities();\r\n}\r\n\r\nfunction buildMap() {\r\n    //  Parse the data out of the map\r\n    const data = gameState.scene.cache.json.get('pond-map');\r\n\r\n    const tileWidth = data.tilewidth;\r\n    const tileHeight = data.tileheight;\r\n\r\n    tileWidthHalf = tileWidth / 2;\r\n    tileHeightHalf = tileHeight / 2;\r\n\r\n    const layer = data.layers[0].data;\r\n\r\n    const mapWidth = data.layers[0].width;\r\n    const mapHeight = data.layers[0].height;\r\n\r\n    const centerX = mapWidth * tileWidthHalf;\r\n    const centerY = 32;\r\n\r\n    let i = 0;\r\n\r\n    for (let y = 0; y < mapHeight; y++) {\r\n        if (y % 2 === 0) {\r\n            //continue;\r\n        }\r\n        for (let x = 0; x < mapWidth; x++) {\r\n            const id = layer[i] - 1;\r\n\r\n            const tx = (x - y) * tileWidthHalf;\r\n            const ty = (x + y) * tileHeightHalf;\r\n\r\n            let tile: Phaser.GameObjects.Image;\r\n\r\n            // 53 is water\r\n            if (id === 53) {\r\n                //tile = gameState.scene.add.image(centerX + tx, centerY + ty, 'debug');\r\n\r\n                // DIRTY HACK - the spritesheet has bleeding in some cases (specifically, I think the sheet is fine, but reading it somehow causes alignment problems).\r\n                // Usually it's fine but water gets particular ugly at different zoom levels, so swap in a pure tile.\r\n                tile = gameState.scene.add.image(centerX + tx, centerY + ty, 'water');\r\n                //tile.setVisible(false);\r\n                gameState.waterTiles.push(tile);\r\n            } else {\r\n                tile = gameState.scene.add.image(centerX + tx, centerY + ty, 'landscape-tileset', id);\r\n            }\r\n            console.log(`${tile.x}, ${tile.y} - ${tile.width}, ${tile.height}`);\r\n\r\n            tile.depth = centerY + ty;\r\n            i++;\r\n        }\r\n    }\r\n    console.log(`${gameState.waterTiles.length} water tiles.`)\r\n}\r\n\r\nexport function setupGame(): Phaser.Game {\r\n    const game = new Phaser.Game(gameConfig);\r\n    return game;\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class Food extends Entity {\r\n\r\n    static createBread(gameState: GameState, x: number, y: number): Food {\r\n\r\n        const bread = new Food(gameState, 'bread', x, y);\r\n        bread.image.scale = 0.2;\r\n        gameState.entities.push(bread);\r\n        return bread;\r\n    }\r\n\r\n    start = 0;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        super(gameState, imageName, x, y);\r\n\r\n        this.image.depth = y + 32;\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Food;\r\n    }\r\n\r\n    update() {\r\n        this.start++;\r\n\r\n        if (this.start > 200) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { Food } from \"./food\";\r\n\r\nexport class GameState {\r\n\r\n    scene: Phaser.Scene;\r\n    cursors: Phaser.Types.Input.Keyboard.CursorKeys;\r\n    entities: Array<Entity> = [];\r\n    waterTiles: Array<Phaser.GameObjects.Image> = [];\r\n\r\n    debug = {\r\n        showTargets: false\r\n    }\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this.scene = scene;\r\n        this.cursors = scene.input.keyboard.createCursorKeys();\r\n    }\r\n\r\n    update() {\r\n        this.entities.forEach(entity => {\r\n            entity.update();\r\n        })\r\n    }\r\n\r\n    pruneEntities() {\r\n\r\n        const newEntities: Array<Entity> = [];\r\n        this.entities.forEach(entity => {\r\n            if (!entity.isDestroyed) {\r\n                newEntities.push(entity);\r\n            }\r\n        });\r\n        this.entities = newEntities;\r\n    }\r\n\r\n    fetchFood(): Food[] {\r\n        return this.entities.filter(e => e.entityType() === EntityType.Food && !e.isDestroyed) as Food[];\r\n    }\r\n\r\n    addEntity(entity: Entity) {\r\n\r\n        this.entities.push(entity);\r\n        return entity;\r\n    }\r\n\r\n    showWaterCollision() {\r\n        for (let i = 0; i < this.waterTiles.length; i++) {\r\n            const tile = this.waterTiles[i];\r\n            const r = tile.getBounds();\r\n            this.scene.add.rectangle(r.x, r.y, r.width, r.height, 0x9966ff);\r\n        }\r\n    }\r\n\r\n    isPointWater(x: number, y: number) {\r\n        // collisions and drawing aren't aligned. no idea why.\r\n        for (let i = 0; i < this.waterTiles.length; i++) {\r\n            const tile = this.waterTiles[i];\r\n            if (tile.getBounds().contains(x + 60, y + 60)) {\r\n                this.scene.add.rectangle(x, y, 2, 2, 0xff0000);\r\n                return true;\r\n            }\r\n        }\r\n        this.scene.add.rectangle(x, y, 6, 6, 0x00ff00);\r\n        return false;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport * as Game from './game/gameRunner'\r\n\r\nGame.setupGame();\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div id=\"game-container\"/>\r\n      </header>\r\n        Learn <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> and <a className=\"App-link\" href=\"https://phaser.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Phaser</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}