{"version":3,"sources":["game/utils.ts","game/direction.ts","game/entity.ts","game/entityType.ts","game/invisibleTarget.ts","game/duck.ts","game/food.ts","game/gameState.ts","game/gameScene.ts","game/uiScene.ts","game/gameRunner.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomInt","max","Math","floor","random","randomElement","array","length","Direction","name","offset","x","y","opposite","this","west","northWest","north","northEast","east","southEast","south","southWest","map","list","push","i","vector","angle","Phaser","Angle","Between","abs","quad","initialise","EntityType","Entity","gameState","imageName","image","isDestroyed","scene","add","destroy","otherEntity","Distance","entity","speed","vectorToTarget","dx","dy","xR","cos","yR","sin","total","modX","modY","console","error","RadToDeg","Vector2","InvisibleTarget","depth","setVisible","debug","showTargets","Invisible","duckAnims","walk","startFrame","endFrame","feed","quack","stand","standFlap","DuckType","duckTypes","Duck","duckType","motion","anim","direction","f","target","animationStep","active","idleTicks","scale","setInteractive","on","pointer","uiScene","displayDuckInfo","time","delayedCall","changeFrame","addTextWithDuration","delay","localF","startWalkAnimation","startStandFlapAnimation","frame","texture","get","isPointWater","sound","play","volume","startQuackAnimation","entityType","Food","fetchFood","select","distance","distanceFromEntity","sort","reverse","vectorToEntity","startStandAnimation","waterTile","waterTiles","addEntity","determineFromVector","startFeedAnimation","start","bread","entities","GameState","cursors","forEach","update","newEntities","filter","e","r","getBounds","rectangle","width","height","contains","_instance","GameScene","load","json","spritesheet","frameWidth","frameHeight","audio","singleton","window","addEventListener","game","resize","innerWidth","innerHeight","input","setDefaultCursor","point","cameras","main","getWorldPoint","createBread","buildMap","randomTile","randomDuckType","scrollX","scrollY","zoom","pruneEntities","data","cache","tileWidthHalf","tilewidth","tileHeightHalf","tileheight","layer","layers","mapWidth","mapHeight","centerX","id","tx","ty","tile","FONT_FAMILY","UiScene","key","duckInfoObjects","startBeginningMessage","helloMessage","addText","findMiddleWidth","alpha","foodMessage","timeLine","tweens","timeline","targets","duration","text","size","textObject","fontFamily","fontSize","seconds","duck","element","title","fontStyle","object","gameConfig","type","mode","FIT","parent","backgroundColor","App","className","href","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b30629f.chunk.js","sourcesContent":["export function randomInt(max: number): number {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport function randomElement<T>(array: Array<T>) : T {\r\n    const i = randomInt(array.length);\r\n    return array[i];\r\n}","import { randomInt } from \"./utils\";\r\n\r\nexport class Direction {\r\n\r\n    static west: Direction;\r\n    static northWest: Direction;\r\n    static north: Direction;\r\n    static northEast: Direction;\r\n    static east: Direction;\r\n    static southEast: Direction;\r\n    static south: Direction;\r\n    static southWest: Direction;\r\n\r\n    static map: Direction[];\r\n    static list: Direction[];\r\n\r\n    static initialise() {\r\n\r\n        Direction.west = new Direction('west', 0, -2, 0);\r\n        Direction.northWest = new Direction('northWest', 32, -2, -1);\r\n        Direction.north = new Direction('north', 64, 0, -2);\r\n        Direction.northEast = new Direction('northEast', 96, 2, -1);\r\n        Direction.east = new Direction('east', 128, 2, 0);\r\n        Direction.southEast = new Direction('southEast', 160, 2, 1);\r\n        Direction.south = new Direction('south', 192, 0, 2);\r\n        Direction.southWest = new Direction('southWest', 224, -2, 1);\r\n\r\n        Direction.west.opposite = Direction.east;\r\n        Direction.northWest.opposite = Direction.southEast;\r\n        Direction.north.opposite = Direction.south;\r\n        Direction.northEast.opposite = Direction.southWest;\r\n        Direction.east.opposite = Direction.west;\r\n        Direction.southEast.opposite = Direction.northWest;\r\n        Direction.south.opposite = Direction.north;\r\n        Direction.southWest.opposite = Direction.northEast;\r\n\r\n        Direction.map = [];\r\n        Direction.map[Direction.west.name] = Direction.west;\r\n        Direction.map[Direction.northWest.name] = Direction.northWest;\r\n        Direction.map[Direction.north.name] = Direction.north;\r\n        Direction.map[Direction.northEast.name] = Direction.northEast;\r\n        Direction.map[Direction.east.name] = Direction.east;\r\n        Direction.map[Direction.southEast.name] = Direction.southEast;\r\n        Direction.map[Direction.south.name] = Direction.south;\r\n        Direction.map[Direction.southWest.name] = Direction.southWest;\r\n\r\n        Direction.list = [];\r\n        Direction.list.push(Direction.west);\r\n        Direction.list.push(Direction.northWest);\r\n        Direction.list.push(Direction.north);\r\n        Direction.list.push(Direction.northEast);\r\n        Direction.list.push(Direction.east);\r\n        Direction.list.push(Direction.southEast);\r\n        Direction.list.push(Direction.south);\r\n        Direction.list.push(Direction.southWest);\r\n    }\r\n\r\n    static get(name: string): Direction {\r\n        return Direction.map[name];\r\n    }\r\n\r\n    static random(): Direction {\r\n        const i = randomInt(Direction.list.length);\r\n        return Direction.list[i];\r\n    }\r\n\r\n    static determineFromVector(vector: Phaser.Math.Vector2) {\r\n\r\n        const angle = Phaser.Math.Angle.Between(0, 0, Math.abs(vector.x), Math.abs(vector.y));\r\n\r\n        let quad = [];\r\n\r\n        // calculate quads for annoying trig and negative sign reasons. In phaser, 0,0 is top left so Y is inverted.\r\n\r\n        // top left quad\r\n        if (vector.x >= 0 && vector.y < 0) {\r\n            quad = [Direction.east, Direction.northEast, Direction.north];\r\n        }\r\n        // bottom left\r\n        else if (vector.x >= 0 && vector.y >= 0) {\r\n            quad = [Direction.east, Direction.southEast, Direction.south];\r\n        }\r\n        // top right\r\n        else if (vector.x < 0 && vector.y < 0) {\r\n            quad = [Direction.west, Direction.northWest, Direction.north];\r\n        }\r\n        // bottom right\r\n        else if (vector.x < 0 && vector.y >= 0) {\r\n            quad = [Direction.west, Direction.southWest, Direction.south];\r\n        }\r\n\r\n        let i = 0;\r\n        if (angle > 1.178097) { // 67.5 deg\r\n            i = 2;\r\n        }\r\n        else if (angle > 0.3926991) { // 22.5 deg\r\n            i = 1;\r\n        }\r\n\r\n        const direction = quad[i];\r\n        return direction;\r\n    }\r\n\r\n    name: string;\r\n    offset: number;\r\n    x: number;\r\n    y: number;\r\n    opposite: Direction;\r\n\r\n    constructor(name: string, offset: number, x: number, y: number) {\r\n        this.name = name;\r\n        this.offset = offset;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nDirection.initialise();\r\n","import { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport abstract class Entity {\r\n\r\n    image: Phaser.GameObjects.Image;\r\n    isDestroyed = false;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        this.image = gameState.scene.add.image(x, y, imageName);\r\n    }\r\n\r\n    abstract entityType(): EntityType;\r\n\r\n    update() {\r\n\r\n    }\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n        if (this.image)\r\n            this.image.destroy();\r\n    }\r\n\r\n    distanceFromEntity(otherEntity: Entity) {\r\n        return Phaser.Math.Distance.Between(this.x, this.y, otherEntity.x, otherEntity.y);\r\n    }\r\n\r\n    vectorToEntity(entity: Entity, speed: number) {\r\n        return this.vectorToTarget(entity.x, entity.y, speed);\r\n    }\r\n\r\n    vectorToTarget(x: number, y: number, speed: number) {\r\n\r\n        const dx = x - this.x;\r\n        const dy = y - this.y;\r\n\r\n        const angle = Phaser.Math.Angle.Between(this.x, this.y, x, y);\r\n        let xR = Math.cos(angle);\r\n        let yR = Math.sin(angle);\r\n\r\n        const total =  Math.abs(xR) + Math.abs(yR);\r\n        let modX = (xR / total) * speed;\r\n        let modY = (yR / total) * speed;\r\n\r\n        if (modX > 10 || modY > 10) {\r\n\r\n            console.error(`Spurious vectorToTargetResult - C: ${x}, ${y} | A: ${Phaser.Math.RadToDeg(angle)} | ${dx}, ${dy} | ${modX}, ${modY}`);\r\n\r\n            if (modX > speed) {\r\n                modX = speed;\r\n            }\r\n            else if (modX < -speed) {\r\n                modX = -speed;\r\n            }\r\n\r\n            if (modY > speed) {\r\n                modY = speed;\r\n            }\r\n            else if (modY < -speed) {\r\n                modY = -speed;\r\n            }\r\n        }\r\n        return new Phaser.Math.Vector2(modX, modY);\r\n    }\r\n\r\n    get x() {\r\n        return this.image.x;\r\n    }\r\n    set x(x: number) {\r\n        this.image.x = x;\r\n    }\r\n\r\n    get y() {\r\n        return this.image.y;\r\n    }\r\n    set y(y: number) {\r\n        this.image.y = y;\r\n    }\r\n}\r\n","export enum EntityType {\r\n    Food,\r\n    Duck,\r\n    Invisible\r\n}","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class InvisibleTarget extends Entity {\r\n\r\n    constructor(gameState: GameState, x: number, y: number) {\r\n        super(gameState, 'target', x, y);\r\n\r\n        this.image.depth = 2000;\r\n        this.image.setVisible(gameState.debug.showTargets);\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Invisible;\r\n    }\r\n\r\n    update() {\r\n    }\r\n}\r\n","import { Direction } from \"./direction\";\r\nimport { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\nimport { InvisibleTarget } from \"./invisibleTarget\";\r\nimport { randomElement, randomInt } from \"./utils\";\r\n\r\nconst duckAnims = {\r\n    walk: {\r\n        startFrame: 0,\r\n        endFrame: 4,\r\n        speed: 0.20\r\n    },\r\n    feed: {\r\n        startFrame: 5,\r\n        endFrame: 7,\r\n        speed: 0.8\r\n    },\r\n    quack: {\r\n        startFrame: 8,\r\n        endFrame: 10,\r\n        speed: 0.6\r\n    },\r\n    stand: {\r\n        startFrame: 11,\r\n        endFrame: 13,\r\n        speed: 0.2\r\n    },\r\n    standFlap: {\r\n        startFrame: 14,\r\n        endFrame: 16,\r\n        speed: 0.2\r\n    }\r\n};\r\n\r\nexport class DuckType {\r\n    static duckTypes = [\r\n        \"white\",\r\n        \"mallard\"];\r\n\r\n    static random() {\r\n        return DuckType.duckTypes[randomInt(DuckType.duckTypes.length)];\r\n    }\r\n}\r\n\r\nexport class Duck extends Entity {\r\n\r\n    name = randomElement([\"Daisy\", \"Mavis\", \"Harold\", \"Ernest\", \"Ermintrude\", \"Annie\", \"Reginald\", \"Clarence\", \"Emmett\", \"Gert\", \"Hilda\", \"Doris\", \"Hattie\"]);\r\n\r\n    motion: any;\r\n    anim: any;\r\n    direction: Direction = Direction.random();\r\n    speed: number;\r\n\r\n    /**\r\n     * Frame.\r\n     */\r\n    f: number;\r\n\r\n    target: Entity = null;\r\n    vector: Phaser.Math.Vector2 = null;\r\n\r\n    gameState: GameState;\r\n\r\n    animationStep = 1;\r\n\r\n    active = true;\r\n\r\n    idleTicks = 0;\r\n\r\n    constructor(gameState: GameState, x: number, y: number, duckType: string) {\r\n        super(gameState, `duck-${duckType}`, x, y);\r\n\r\n        this.image.scale = 0.8;\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', (pointer: Phaser.Input.Pointer) => {\r\n            this.gameState.uiScene.displayDuckInfo(this);\r\n        });\r\n\r\n\r\n\r\n        this.motion = 'walk';\r\n        this.anim = duckAnims[this.motion];\r\n        this.speed = this.anim.speed;\r\n        this.f = this.anim.startFrame;\r\n        this.gameState = gameState;\r\n\r\n        this.gameState.scene.time.delayedCall(this.anim.speed * 1000, this.changeFrame, [], this);\r\n    };\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Duck;\r\n    }\r\n\r\n    onObjectClicked(pointer: Phaser.Input.Pointer) {\r\n        this.gameState.uiScene.addTextWithDuration(this.name, 6000);\r\n    }\r\n\r\n    startWalkAnimation() {\r\n        this.f = duckAnims['walk'].startFrame;\r\n        this.anim = duckAnims['walk'];\r\n        this.animationStep = 1;\r\n        this.motion = 'walk';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    startFeedAnimation() {\r\n        this.f = duckAnims['feed'].startFrame;\r\n        this.anim = duckAnims['feed'];\r\n        this.animationStep = 1;\r\n        this.motion = 'feed';\r\n        this.changeFrame();\r\n        this.active = false;\r\n    }\r\n\r\n    startQuackAnimation() {\r\n        this.f = duckAnims['quack'].startFrame;\r\n        this.anim = duckAnims['quack'];\r\n        this.animationStep = 1;\r\n        this.motion = 'quack';\r\n        this.changeFrame();\r\n        this.active = false;\r\n    }\r\n\r\n    startStandAnimation() {\r\n        this.f = duckAnims['stand'].startFrame;\r\n        this.anim = duckAnims['stand'];\r\n        this.animationStep = 1;\r\n        this.motion = 'stand';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    startStandFlapAnimation() {\r\n        this.f = duckAnims['standFlap'].startFrame;\r\n        this.anim = duckAnims['standFlap'];\r\n        this.animationStep = 1;\r\n        this.motion = 'standFlap';\r\n        this.changeFrame();\r\n        this.active = true;\r\n    }\r\n\r\n    changeFrame() {\r\n\r\n        let delay = this.anim.speed;\r\n        this.image.depth = this.y + 256;\r\n        let localF = this.f;\r\n\r\n        if (this.f > this.anim.endFrame || this.f < 0 || this.f < this.anim.startFrame) {\r\n            switch (this.motion) {\r\n                case 'walk':\r\n                    this.animationStep = -this.animationStep;\r\n                    this.f += 2 * this.animationStep;\r\n                    localF = this.f;\r\n                    break;\r\n\r\n                case 'feed':\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.startWalkAnimation, [], this);\r\n                    return;\r\n\r\n                case 'quack':\r\n                    localF = this.f - 4;\r\n                    if (this.f === 11) {\r\n                        localF = 9;\r\n                    }\r\n                    else if (this.f > 16) {\r\n                        this.startWalkAnimation();\r\n                        return;\r\n                    }\r\n                    this.gameState.scene.time.delayedCall(delay * 1000, this.startWalkAnimation, [], this);\r\n                    break;\r\n\r\n                case 'stand':\r\n                    this.startStandFlapAnimation();\r\n                    return;\r\n                case 'standFlap':\r\n                    this.f = this.anim.startFrame;\r\n                    localF = this.f;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.image.frame = this.image.texture.get(this.direction.offset + localF);\r\n        this.gameState.scene.time.delayedCall(delay * 1000, this.changeFrame, [], this);\r\n        this.f += this.animationStep;\r\n    }\r\n\r\n    /**\r\n     * Moves the duck by the given amount, or returns false is fuck a movement isn't possible.\r\n     * @param modX Amount to move duck by.\r\n     * @param modY Amount to move duck by.\r\n     */\r\n    move(modX: number, modY: number): boolean {\r\n\r\n        if (this.gameState.isPointWater(this.x + modX, this.y + modY)) {\r\n            this.x += modX;\r\n            this.y += modY;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    update() {\r\n        if (!this.active)\r\n            return;\r\n\r\n        // 0.05% chance to quack\r\n        if (randomInt(2000) === 1) {\r\n            this.gameState.scene.sound.add('quackquack-f').play({ volume: 0.2 })\r\n            this.startQuackAnimation();\r\n        }\r\n\r\n        // find a target\r\n        if (this.target == null || this.target.isDestroyed || this.target.entityType() !== EntityType.Food) {\r\n\r\n            // look for food\r\n            if (this.gameState.fetchFood().length > 0) {\r\n                const breadList = this.gameState.fetchFood().map(f => ({ distance: this.distanceFromEntity(f) + randomInt(30), target: f }));\r\n                const select = breadList.sort(f => f.distance).reverse()[0];\r\n                if (select.distance < 450) {\r\n\r\n                    this.target?.destroy();\r\n                    this.target = select.target;\r\n                    this.vector = this.vectorToEntity(this.target, 5);\r\n                    this.startStandAnimation();\r\n                }\r\n            }\r\n\r\n            // find a random point to swim too\r\n            if (this.target == null) {\r\n                // no bread, swim to random target\r\n                const waterTile = randomElement(this.gameState.waterTiles);\r\n                this.target = this.gameState.addEntity(new InvisibleTarget(this.gameState, waterTile.x, waterTile.y));\r\n\r\n                this.vector = this.vectorToEntity(this.target, 1);\r\n                this.startWalkAnimation();\r\n            }\r\n            this.direction = Direction.determineFromVector(this.vector);\r\n        }\r\n\r\n        if (this.distanceFromEntity(this.target) < 2.5) {\r\n            this.target.destroy();\r\n\r\n            if (this.target.entityType() === EntityType.Food) {\r\n                this.startFeedAnimation();\r\n            }\r\n            this.target = null;\r\n            return;\r\n        }\r\n\r\n        this.x += this.vector.x;\r\n        this.y += this.vector.y;\r\n        this.image.depth = this.y + this.image.y;\r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { GameState } from \"./gameState\";\r\n\r\nexport class Food extends Entity {\r\n\r\n    static createBread(gameState: GameState, x: number, y: number): Food {\r\n\r\n        const bread = new Food(gameState, 'bread', x, y);\r\n        bread.image.scale = 0.2;\r\n        gameState.entities.push(bread);\r\n        return bread;\r\n    }\r\n\r\n    start = 0;\r\n\r\n    constructor(gameState: GameState, imageName: string, x: number, y: number) {\r\n        super(gameState, imageName, x, y);\r\n\r\n        this.image.depth = y + 32;\r\n    }\r\n\r\n    entityType(): EntityType {\r\n        return EntityType.Food;\r\n    }\r\n\r\n    update() {\r\n        this.start++;\r\n\r\n        if (this.start > 200) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { EntityType } from \"./entityType\";\r\nimport { Food } from \"./food\";\r\nimport { GameScene } from \"./gameScene\";\r\nimport { UiScene } from \"./uiScene\";\r\n\r\nexport class GameState {\r\n\r\n    private static _instance = null;\r\n    static singleton(): GameState {\r\n        if (GameState._instance == null) {\r\n            this._instance = new GameState();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    scene: GameScene;\r\n    uiScene: UiScene;\r\n    cursors: Phaser.Types.Input.Keyboard.CursorKeys;\r\n    entities: Array<Entity> = [];\r\n    waterTiles: Array<Phaser.GameObjects.Image> = [];\r\n\r\n    debug = {\r\n        showTargets: false\r\n    }\r\n\r\n    update() {\r\n        this.entities.forEach(entity => {\r\n            entity.update();\r\n        })\r\n    }\r\n\r\n    pruneEntities() {\r\n\r\n        const newEntities: Array<Entity> = [];\r\n        this.entities.forEach(entity => {\r\n            if (!entity.isDestroyed) {\r\n                newEntities.push(entity);\r\n            }\r\n        });\r\n        this.entities = newEntities;\r\n    }\r\n\r\n    fetchFood(): Food[] {\r\n        return this.entities.filter(e => e.entityType() === EntityType.Food && !e.isDestroyed) as Food[];\r\n    }\r\n\r\n    addEntity(entity: Entity) {\r\n\r\n        this.entities.push(entity);\r\n        return entity;\r\n    }\r\n\r\n    showWaterCollision() {\r\n        for (let i = 0; i < this.waterTiles.length; i++) {\r\n            const tile = this.waterTiles[i];\r\n            const r = tile.getBounds();\r\n            this.scene.add.rectangle(r.x, r.y, r.width, r.height, 0x9966ff);\r\n        }\r\n    }\r\n\r\n    isPointWater(x: number, y: number) {\r\n        // collisions and drawing aren't aligned. no idea why.\r\n        for (let i = 0; i < this.waterTiles.length; i++) {\r\n            const tile = this.waterTiles[i];\r\n            if (tile.getBounds().contains(x + 60, y + 60)) {\r\n                this.scene.add.rectangle(x, y, 2, 2, 0xff0000);\r\n                return true;\r\n            }\r\n        }\r\n        this.scene.add.rectangle(x, y, 6, 6, 0x00ff00);\r\n        return false;\r\n    }\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { Duck, DuckType } from './duck';\r\nimport { Food } from './food';\r\nimport { GameState } from './gameState';\r\nimport { randomInt } from './utils';\r\n\r\n\r\nconst ZOOM_LEVEL = 0.4;\r\n\r\nexport class GameScene extends Phaser.Scene {\r\n    \r\n    gameState: GameState;\r\n\r\n    constructor() {\r\n        super('GameScene');\r\n    }\r\n\r\n    preload() {\r\n        const scene = this as Phaser.Scene;\r\n\r\n        scene.load.json('pond-map', 'assets/pond.json');\r\n        scene.load.spritesheet('duck-white', 'assets/duck-white-spritesheet.png', { frameWidth: 512, frameHeight: 512 });\r\n        scene.load.spritesheet('duck-mallard', 'assets/duck-mallard-spritesheet.png', { frameWidth: 512, frameHeight: 512 });\r\n        scene.load.spritesheet('landscape-tileset', 'assets/landscape-spritesheet.png', { frameWidth: 132, frameHeight: 100 });\r\n        scene.load.spritesheet('water', 'assets/landscapeTiles_066.png', { frameWidth: 132, frameHeight: 100 });\r\n\r\n        scene.load.image('bread', 'assets/bread_NW.png');\r\n        scene.load.image('breadc', 'assets/bread_cursor.png');\r\n\r\n        scene.load.image('debug', 'assets/debug.png');\r\n\r\n        scene.load.audio('quackquack-f', 'assets/quackquack-f.mp3');\r\n    }\r\n\r\n    create() {\r\n        this.gameState = GameState.singleton();\r\n        this.gameState.scene = this;\r\n    \r\n        window.addEventListener(\"resize\", () => {\r\n            GameState.singleton().scene.game.scale.resize(window.innerWidth / ZOOM_LEVEL, window.innerHeight / ZOOM_LEVEL);\r\n        }, false);\r\n\r\n        this.input.setDefaultCursor('url(assets/bread_cursor.png), pointer');\r\n        this.input.on('pointerdown', function (pointer: Phaser.Input.Pointer) {\r\n\r\n            const point = this.gameState.scene.cameras.main.getWorldPoint(pointer.x, pointer.y);\r\n            Food.createBread(this.gameState, point.x, point.y + 40);\r\n        }, this);\r\n\r\n        this.buildMap();\r\n\r\n        const x_offset = 4550;\r\n        const y_offset = 2000;\r\n\r\n        const startDucks = 7;\r\n        for (let i = 0; i < startDucks; i++) {\r\n            const randomTile = this.gameState.waterTiles[randomInt(this.gameState.waterTiles.length)];\r\n            const randomDuckType = DuckType.random();\r\n\r\n            this.gameState.addEntity(new Duck(this.gameState, randomTile.x, randomTile.y, randomDuckType));\r\n        }\r\n\r\n        this.gameState.scene.cameras.main.scrollX = x_offset;\r\n        this.gameState.scene.cameras.main.scrollY = y_offset;\r\n        this.gameState.scene.cameras.main.zoom = ZOOM_LEVEL;\r\n\r\n    }\r\n\r\n    update() {\r\n        this.gameState.update();\r\n        this.gameState.pruneEntities();\r\n    }\r\n\r\n    buildMap() {\r\n        //  Parse the data out of the map\r\n        const data = this.gameState.scene.cache.json.get('pond-map');\r\n\r\n        const tileWidth = data.tilewidth;\r\n        const tileHeight = data.tileheight;\r\n\r\n        const tileWidthHalf = tileWidth / 2;\r\n        const tileHeightHalf = tileHeight / 2;\r\n\r\n        const layer = data.layers[0].data;\r\n\r\n        const mapWidth = data.layers[0].width;\r\n        const mapHeight = data.layers[0].height;\r\n\r\n        const centerX = mapWidth * tileWidthHalf;\r\n        const centerY = 32;\r\n\r\n        let i = 0;\r\n\r\n        for (let y = 0; y < mapHeight; y++) {\r\n            for (let x = 0; x < mapWidth; x++) {\r\n                const id = layer[i] - 1;\r\n\r\n                const tx = (x - y) * tileWidthHalf;\r\n                const ty = (x + y) * tileHeightHalf;\r\n\r\n                let tile: Phaser.GameObjects.Image;\r\n\r\n                // 53 is water\r\n                if (id === 53) {\r\n                    //tile = gameState.scene.add.image(centerX + tx, centerY + ty, 'debug');\r\n\r\n                    // DIRTY HACK - the spritesheet has bleeding in some cases (specifically, I think the sheet is fine, but reading it somehow causes alignment problems).\r\n                    // Usually it's fine but water gets particular ugly at different zoom levels, so swap in a pure tile.\r\n                    tile = this.gameState.scene.add.image(centerX + tx, centerY + ty, 'water');\r\n                    //tile.setVisible(false);\r\n                    this.gameState.waterTiles.push(tile);\r\n                } else {\r\n                    tile = this.gameState.scene.add.image(centerX + tx, centerY + ty, 'landscape-tileset', id);\r\n                }\r\n\r\n                tile.depth = centerY + ty;\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { Duck } from './duck';\r\nimport { GameState } from './gameState';\r\n\r\nconst FONT_FAMILY = 'Perpetua , Georgia, \"Goudy Bookletter 1911\", Times, serif';\r\n\r\nexport class UiScene extends Phaser.Scene {\r\n\r\n\r\n    gameState: GameState;\r\n\r\n    duckInfoObjects: Array<{ destroy(): void }> = [];\r\n\r\n\r\n    constructor() {\r\n        super({ key: 'UiScene', active: true });\r\n\r\n\r\n    }\r\n\r\n    preload() {\r\n\r\n    }\r\n\r\n    create() {\r\n        this.gameState = GameState.singleton();\r\n        this.gameState.uiScene = this;\r\n\r\n        this.startBeginningMessage();\r\n    }\r\n\r\n    update() {\r\n    }\r\n\r\n    startBeginningMessage() {\r\n        const helloMessage = this.addText('Hello. This is your pond.', 6);\r\n        helloMessage.x = this.findMiddleWidth(helloMessage);\r\n        helloMessage.y = (this.cameras.main.height / 4);\r\n        helloMessage.alpha = 0;\r\n        const foodMessage = this.addText('Try feeding a duck. Press on the water.', 4);\r\n        foodMessage.x = this.findMiddleWidth(foodMessage);\r\n        foodMessage.y = (this.cameras.main.height / 4);\r\n        foodMessage.alpha = 0;\r\n\r\n        const timeLine = this.tweens.timeline();\r\n        timeLine.add({\r\n            targets: helloMessage,\r\n            duration: 2000,\r\n            alpha: 1\r\n        })\r\n            .add({\r\n                targets: helloMessage,\r\n                duration: 4000\r\n            })\r\n            .add({\r\n                targets: helloMessage,\r\n                duration: 2000,\r\n                alpha: 0\r\n            })\r\n            // identical tween for a delay\r\n            .add({\r\n                targets: helloMessage,\r\n                duration: 2000,\r\n                alpha: 0\r\n            })\r\n            .add({\r\n                targets: foodMessage,\r\n                duration: 2000,\r\n                alpha: 1\r\n            })\r\n            .add({\r\n                targets: foodMessage,\r\n                duration: 4000\r\n            })\r\n            .add({\r\n                targets: foodMessage,\r\n                duration: 2000,\r\n                alpha: 0\r\n            });\r\n        timeLine.play();\r\n    }\r\n\r\n    addText(text: string, size: number = 2): Phaser.GameObjects.Text {\r\n        const textObject = this.add.text(0, 0, text, { fontFamily: FONT_FAMILY, fontSize: `${size}em` });\r\n        return textObject;\r\n    }\r\n\r\n    addTextWithDuration(text: string, seconds: number, size: number = 2): Phaser.GameObjects.Text {\r\n        const textObject = this.addText(text, size);\r\n        this.time.delayedCall(seconds * 1000, () => { textObject.destroy(); }, null, null);\r\n        return textObject;\r\n    }\r\n\r\n    displayDuckInfo(duck: Duck) {\r\n        this.duckInfoObjects.forEach(element => {\r\n            element.destroy();\r\n        });\r\n\r\n        const name = this.addText(duck.name, 4);\r\n        const title = this.add.text(0, 0, \"the duck\", { fontFamily: FONT_FAMILY, fontSize: '2em', fontStyle: 'italic' });\r\n        name.x = 40;\r\n        name.y = this.cameras.main.height * 0.75;\r\n\r\n        title.y = name.y + name.height - (title.height * 1.25);\r\n        title.x = name.x + name.width + 20;\r\n\r\n        this.duckInfoObjects = [name, title];\r\n    }\r\n\r\n\r\n    private findMiddleWidth(object: { width: number }): number {\r\n        return (this.cameras.main.width / 2) - (object.width / 2);\r\n    }\r\n\r\n}\r\n","import * as Phaser from 'phaser';\r\nimport { GameScene } from './gameScene';\r\nimport { GameState } from './gameState';\r\nimport { UiScene } from './uiScene';\r\n\r\nlet gameState: GameState;\r\n\r\nconst ZOOM_LEVEL = 0.4;\r\n\r\nconst gameConfig: Phaser.Types.Core.GameConfig = {\r\n    title: 'duck-game',\r\n\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n    },\r\n\r\n    parent: \"game-container\",\r\n    width: 1600,\r\n    height: 1200,\r\n\r\n    /*\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: true,\r\n        },\r\n    },\r\n    */\r\n    scene: [ GameScene, UiScene ],\r\n    backgroundColor: '#000000',\r\n};\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    gameState.scene.game.scale.resize(window.innerWidth / ZOOM_LEVEL, window.innerHeight / ZOOM_LEVEL);\r\n}, false);\r\n\r\n\r\nexport function setupGame(): Phaser.Game {\r\n    const game = new Phaser.Game(gameConfig);\r\n    return game;\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport * as Game from './game/gameRunner'\r\n\r\nGame.setupGame();\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div id=\"game-container\"/>\r\n      </header>\r\n        Learn <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> and <a className=\"App-link\" href=\"https://phaser.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Phaser</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}